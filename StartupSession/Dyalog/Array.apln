:Namespace Array   ⍝ A model for a literal notation for most APL arrays
    ⎕ML←1

    ∇ text←{inner}Serialise array;a;Quot;Brack;Encl;name;⎕IO;zero;trailshape;content;SubMat;Dia;Esc;DblQuot;MkEsc;DelQQ;q;drs;items;RSP;RRD;RRP;ROP ⍝ Convert Array to text
      ⎕IO←1
      :If 900⌶⍬ ⋄ inner←0 ⋄ :EndIf  ⍝ flag for outer call of Serialise
      q←''''
      DblQuot←{'('q,(q ⎕R'&&'⍕⍵),q')'}
      MkEsc←{
          stop←~⍵.Lengths[3]
          nums←⍕⎕UCS ⍵.Match↓⍨-~stop
          ''',',stop↓'(⎕UCS ',nums,stop↓'),''',⊃⌽⍵.Match
      }
      Esc←'([\x00-\x1F\x80-\xA0]+)(.?)'⎕R MkEsc⍠'Mode' 'D'
      DelQQ←'^(\()'''',' ',''''(\))$'⎕R'\1'
      RSP←{ ⍝ Remove String Parens
          '⎕'∊'''[^'']*'''⎕R''⊢⍵:⍵
          '^\((''.*'')\)$'⎕R'\1'⊢⍵
      }
      Quot←RSP∘DelQQ∘Esc∘DblQuot∘⍕⍤1
      Encl←{
          r←')]'['(['⍳⍺⍺]
          w←⎕FMT ⍵
          c←≢w
          2≤≢⍵:(c↑⍺⍺),w,r↑⍨-c
          (l↑⍺⍺),(¯1⊖l↑w),r↑⍨-l←2+c
      }
      Brack←{(⎕FMT'['Encl⍤2)⍣⍺⍺⊢⍵}
      SubMat←{(¯2+≢⍴⍵)Brack ⍺⍺ ⍵}
      RRP←{ ⍝ Remove Redundant Parens
          x←'''[^'']+'''⎕R{''↑⍨≢⍵.Match}⍵
          b←-⌿'()'∘.=x
          d←(+\+0∘>)b
          I←⌷⍨∘⊂⍨ ⋄ R←⊢⍴⍨÷⍨∘≢,⊣ ⋄ E←⊢∘≢≥⍳⍨
          ⍵/⍨~(⍳≢⍵)∊,(+∘1 ¯1⍤¯1(⊣(⌿⍨)E)⊢)2 R((⍋I∘d)I⊢)⍸|b
      }
      RRD←⊢ ⍝ Disabled wrong algorithm:
⍝      RRD←{ ⍝ Remove Redundant Diamonds
⍝          x←'''[^'']+'''⎕R''⊢⍵
⍝          x←'^ +| +$'⎕R''⊢x
⍝          x←'(.)\([^()]+\)(.)'⎕R'\1\2'⍣≡x
⍝          ' *⋄ *\) *$'⎕R')'⍣(1<≢x∩'⋄')⊢⍵
⍝      }
      ROP←{ ⍝ Remove Outer Parens
          x←' |''[^'']'⎕R''⊢⍵
          x←'(.)\([^()]+\)(.)'⎕R'\1\2'⍣≡x
          '()'≢'^(.)[^)⋄(]+(.)$'⎕R'\1\2'⊢x:⍵
          '^( *)\((.+)\)'⎕R'\1\2'⊢⍵
      }
      Dia←{RRP 1⌽')(',' *⋄ *$' ' *⋄ *(⋄ *)?' '([[(]) *⋄ *'⎕R'' ' ⋄ ' '\1'⍣≡∊↓'⋄',⍨⍵}⍣(2≥⊃⌽⍴array)
      :Trap (~inner)/0   ⍝ trap only outer call
          :If 0=≡array ⍝ simple scalar
              :Select 10|⎕DR array
              :CaseList 0 2  ⍝ char
                  :If (⎕UCS array)∊0,(⍳31),127+⍳33
                      text←1⌽')(⎕UCS ',⍕⎕UCS array
                  :Else
                      text←q,array,q
                  :EndIf
              :CaseList 6    ⍝ ref
                  :If ⎕NULL≡array
                      text←'⎕NULL'
                  :Else
                      text←'('
                      :For name :In array.⎕NL-⍳9
                          :Select |array.⎕NC⊂name
                          :CaseList 2.1 2.2 2.3 2.6 ⍝ var
                              text,←⊂⎕FMT(name,':')(1 Serialise array⍎name)
                          :CaseList 3.2 4.2 ⍝ dfn/dop
                              text,←⊂↑('^ *(',name,') *←')⎕R'\1:'@1 array.⎕NR name
                          :CaseList 9+0.1×⍳9
                              text,←⊂(name,':')(1 Serialise array⍎name)
                          :Else
                              'Unsupported array'⎕SIGNAL 11
                          :EndSelect
                      :EndFor
                      text←⎕FMT⍪text,')'
                  :EndIf
              :Else ⍝ num
                  text←⍕array
              :EndSelect
          :ElseIf ⍬≡⍴array ⍝ enclosure
              'Unsupported array'⎕SIGNAL 11/⍨1=≡array ⍝ ⎕OR
              text←⎕FMT'⊂'(1 Serialise⊃array)
          :ElseIf 0=≢array ⍝ no major cells
              :Select array
              :Case ⍬
                  text←'⍬'
              :Case ''
                  text←q q
              :Else
                  text←(⍕⍴array),'⍴⊂',Dia 1 Serialise⊃array
              :EndSelect
          :ElseIf 1=≢⍴array ⍝ non-empty vec
              :If 326=⎕DR array ⍝ heterovec
                  text←'('Encl⍪Dia∘(1∘Serialise)¨array
              :Else ⍝ simple vec
                  :If 2|⎕DR array ⍝ numvec
                      text←⍕array
                  :Else ⍝ charvec
                      text←Quot array
                  :EndIf
                  :If 1=≢array
                      text←'('text,'⋄)'
                  :EndIf
              :EndIf
              text←⎕FMT⍣(1≡≢array)⊢text
          :ElseIf 0∊¯1↓⍴array ⍝ early 0 length
              zero←¯1+0⍳⍨⍴array
              trailshape←zero↓⍴array
              content←(⍕trailshape),'⍴⊂',Dia 1 Serialise⊃array
              text←zero Brack(1,⍨zero↑⍴array)⍴⊂content
          ⍝ Special-case "tables"
          :ElseIf 2=≢⍴array ⍝ matrix
          :AndIf (⊂≢⊆)array ⍝ nested
          ⍝:AndIf 2≤≢array   ⍝ 2-row
          :AndIf 2∧.≤⍴array  ⍝ 2-row, 2-col
          :AndIf ~326∊drs←⎕DR¨array  ⍝ simple, non-ref'y items
          :AndIf ∧/,1≥≢∘⍴¨array ⍝ scal/vec items
          :AndIf ~∨/(⎕UCS∊(,~2|drs)/,array)∊127 133 0,⍳31 ⍝ ctrl chars
              items←{
                  ⍬≡⍵:'⍬'
                  r←⍕⍵
                  r{⍵:⍺ ⋄ 1⌽q q,''''⎕R'&&'⊢⍺}←⍬≡0⍴⍵  ⍝ quote?
                  r,←'⋄'/⍨1∊⍴⍵                       ⍝ 1-element vec
                  r{⍵:1⌽')(',⍺ ⋄ ⍺}←(1∊⍴⍵)∨(⍬≡⍴⍵)<⍬≡0⍴⍵ ⍝ parens?
                  r
              }¨array
              text←⍕items
              text←'[]'@(1 1)(⍴text)⊢text
          :Else ⍝ high-rank
              :Select 10|⎕DR array
              :CaseList 0 2 ⍝ charmat
                  text←Quot SubMat array
              :Case 6  ⍝ heteromat
                  text←⍪Dia∘(1∘Serialise)¨⊂⍤¯1⊢array
              :Else ⍝ nummat
                  :If ⍬≡array
                  :ElseIf (1↑⍨-≢⍴array)≡0=⍴array
                      text←('⍬'⍴⍨1,⍨¯1↓⍴)SubMat array
                  :ElseIf 2=≢⍴array
                      text←⎕FMT array
                  :Else
                      text←(1∘Serialise)⍤1 SubMat array
                  :EndIf
              :EndSelect
              text←'['Encl text
          :EndIf
          :If ~inner
              text←,{(+/∨\' '≠⌽⍵)↑¨↓⍵}text ⍝ outer result is vector of strings
              text←RRD∘ROP¨text
          :EndIf
      :Else
          ⎕SIGNAL⊂⎕DMX.(('EN'EN)('Message'Message))
      :EndTrap
    ∇


      Deserialise←{ ⍝ Convert text to array
          ⍺←1 ⍝ 1=execute expression; 0=return expression
          q←''''
          ⎕IO←0
          SEP←'⋄',⎕UCS 10 13
     
          Unquot←{(⍺⍺ ⍵)×~≠\q=⍵}
          SepMask←∊∘SEP Unquot
          ParenLev←+\(×¯3+7|¯3+'([{)]}'∘⍳)Unquot
     
          Paren←1⌽')(',⊢
          Split←{1↓¨⍺⍺⊂Over(1∘,)⍵}
     
          Over←{(⍵⍵ ⍺)⍺⍺(⍵⍵ ⍵)}
          EachIfAny←{0=≢⍵:⍵ ⋄ ⍺ ⍺⍺¨⍵}
          EachNonempty←{⍺ ⍺⍺ EachIfAny Over((×≢¨⍵~¨' ')/⊢)⍵}
     
          Parse←{
              0=≢⍵:''
              bot←0=⍺
              (2≤≢⍵)>∨/¯1↓bot:⍺ SubParse ⍵
              p←bot×SepMask ⍵
              ∨/p:∊{1=≢⍵:',⊂',⍵ ⋄ ⍵}⍺(Paren ∇)EachNonempty Over(p Split)⍵
              p←2(1,>/∨¯1↓0,</)bot
              ∨/1↓p:∊(p⊂⍺)∇¨p⊂⍵
              ⍵
          }
     
          ErrIfEmpty←{⍵⊣'Empty array'⎕SIGNAL 11/⍨0=≢⍵}
     
          SubParse←{
              ('})]'⍳⊃⌽⍵)≠('{(['⍳⊃⍵):'Bad bracketing'⎕SIGNAL 2
              (a w)←(1↓¯1∘↓)¨(⍺-1)⍵
              '['=⊃⍵:Paren'{⎕ML←1⋄↑⍵}1/¨',Paren ErrIfEmpty a Parse w ⍝ high-rank
              ':'∊⍵/⍨(1=⍺)×~≠\q=⍵:a Namespace w ⍝ ns
              '('=⊃⍵:Paren{⍵,'⎕NS⍬'/⍨0=≢⍵}a Parse w ⍝ vector/empty ns
              ⍵ ⍝ dfn
          }
     
          ParseLine←{
              c←⍵⍳':'
              1≥≢(c↓⍵)~' ':'Missing value'⎕SIGNAL 6
              name←c↑⍵
              ¯1=⎕NC name:'Invalid name'⎕SIGNAL 2
              name(name,'←',⍺ Parse Over((c+1)↓⊢)⍵)
          }
     
          Namespace←{
              p←(0=⍺)×SepMask ⍵
              (names assns)←↓⍉↑⍺ ParseLine EachNonempty Over(p Split)⍵
              ∊'({'(assns,¨'⋄')'⎕NS'('(, '∘,¨q,¨names,¨⊂q')')'}⍬)'
          }
     
          w←↓⍣(2=≢⍴⍵)⊢⍵                  ⍝ mat?
          w←{¯1↓∊⍵,¨⎕UCS 13}⍣(2=|≡w)⊢w   ⍝ vtv?
          w←'''[^'']+''' '⍝.*'⎕R'&' ''⊢w ⍝ strip comments
     
          pl←ParenLev w
          ∨/0>pl:'Unmatched brackets'⎕SIGNAL 2
          ∨/(pl=0)×SepMask w:'Multi-line input'⎕SIGNAL 11
          (⊃⎕RSI)⍎⍣⍺⊢pl Parse w    ⍝ materialise namespace as child of calling namespace
      }


      Inline←{
          aa←⍺⍺
          (1≡⊃⍵,1)Deserialise 1↓∊(⎕UCS 13),¨'^( *[\w∆⍙]+ *← *)?{( |\R)*|( |\R)*}\R*$'⎕R''⍠'Mode' 'D'⎕NR'aa'
      }


      Is←{
          0::'MISMATCH'⎕SIGNAL 999
          a←Serialise ⍺⍺ Inline 1
          a≡Serialise ⍵:
          a≡Serialise ⎕JSON ⍵:
          ∧/⍵(1∊⍷)¨⊂↑a:
          !#
      }


      Ed←{ ⍝ Skip ⍺⍺ QA if interpreter skips lines that look like invalid ∇ Editor directives
          </⍋(18 1)(⊃⌽'.'⎕VFI 1⊃# ⎕WG'APLVersion'):⍺⍺ ⍵
      }


      ∆NS←{ ⍝ allows ⎕NS names values
          ⍺←⊢ ⍝ default to unnamed namespace
          11::⎕SIGNAL 11
          (0=≢⍵)∨2≥|≡⍵:{_←⍵}⍣(2∊⎕NC'⍺')⊢⍺ ⎕NS ⍵ ⍝ default behaviour
          {_←⍵}⍣(2∊⎕NC'⍺')⊃⊃(⍺⊣⍣(2∊⎕NC'⍺')⊢⍺ ⎕NS ⍬){ ⍝ new behaviour
              (,1)≢(⍴,≡)⍵:⍺⍺⍎⍺,'←⍵ ⋄ ⍺⍺' ⍝ non-⎕OR: use value
              4 11::⍺⍺⍎⍺,'←⎕NS ⍵ ⋄ ⍺⍺' ⍝ object?
              ⍺⍺⍎⍺,'←⍎⎕FX ⍵ ⋄ ⍺⍺⊣⍺{⍺≡⍵:⍬ ⋄ ⎕EX ⍵}⎕FX ⍵' ⍝ function?
          }¨/⍵
      }

      ∆NSinverse←{ ⍝ ⎕NS⍣¯1
          ⍵∘⍎¨'⎕NL-⍳9' '⎕OR¨⎕NL-⍳9' ⍝ names values
      }










    ∇ r←SerialiseQA stop_on_error;⎕IO;Is;⎕TRAP
      ⎕IO←0
      ⎕TRAP←(~stop_on_error)/⊂999 'C' '→r←0'
      Is←{
          0::'MISMATCH'⎕SIGNAL 999
          a←Serialise ⍺⍺ Inline 1
          a≡Serialise ⍵:
          a≡Serialise ⎕JSON ⍵:
          ∧/⍵(1∊⍷)¨⊂↑a:
          !#
      }
     
      :Section scalars
          {
              'a'
          }Is'a'
          {
              42
          }Is 42
      :EndSection
      :Section vectors
          {(42 ⋄ )}Is,42
     
          {(42
              )}Is,42
     
          {
              (1 2 3 'Hello' ⋄ 4 5 6 'World')
          }Is(1 2 3 'Hello')(4 5 6 'World')
     
          {
              (1 2 3 'Hello'
              4 5 6 'World')
          }Is(1 2 3 'Hello')(4 5 6 'World')
     
          {
              (0 1 ⋄ 2 3
              4 5 ⋄ 6 7)
          }Is↓4 2⍴⍳8
     
          {
              ('Three'
              'Blind'
              'Mice')
          }Is'Three' 'Blind' 'Mice'
      :EndSection
      :Section Matrices
          {[0 1 2
              3 4 5]
          }Is 2 3⍴⍳6
     
          {[ ⋄ 0 1 2 3]
          }Is⍉⍪⍳4
     
          {[
              0 1 2 3
              ]
          }Is⍉⍪⍳4
     
          {['Three'
              'Blind'
              'Mice']
          }Is 3 5⍴'ThreeBlindMice '
     
          {[
              ('Three'
              'Blind'
              'Mice')
              ]
          }Is 1 3⍴'Three' 'Blind' 'Mice'
     
          {[1 ⋄ ]
          }Is⍪1
     
          {
              1 2[1 ⋄ ]
          }Is 1 2(⍪1)
      :EndSection
      :Section Combo
          {
              ([0 0 1
              1 0 1
              0 1 1]
     
              [0 1 1
              1 1 0
              0 1 0]
     
              [0 1 1 1
              1 1 1 0]
     
              [0 1 1 0
              1 0 0 1
              0 1 1 0])
     
          }Is Ed{
              _←⍉⍪0 0 1
              _⍪←1 0 1
              _⍪←0 1 1
              r←⊂_
              _←⍉⍪0 1 1
              _⍪←1 1 0
              _⍪←0 1 0
              r,←⊂_
              _←⍉⍪0 1 1 1
              _⍪←1 1 1 0
              r,←⊂_
              _←⍉⍪0 1 1 0
              _⍪←1 0 0 1
              _⍪←0 1 1 0
              r,←⊂_
              r
          }⍬
     
          {[0 'OK' ⋄ 1 'WS FULL' ⋄ 2 'SYNTAX ERROR' ⋄ 3 'INDEX ERROR' ⋄ 4 'RANK ERROR']
          }Is{
              e←⍉⍪0 'OK'
              e⍪←1 'WS FULL'
              e⍪←2 'SYNTAX ERROR'
              e⍪←3 'INDEX ERROR'
              e⍪←4 'RANK ERROR'
              e
          }⍬
          {['a'(⊂1 2)'a'
              (⊂1 2)'a'(⊂1 2)]
          }Is 2 3⍴'a'(⊂1 2)
      :EndSection
     
      :Section High Rank
          {
              [[3
              1 5 9]
              [2 7 1
              2 8]]
          }Is Ed 2 2 3⍴3 0 0 1 5 9 2 7 1 2 8 0
      :EndSection
     
      :Section Empty
          {
              ⍬
          }Is ⍬
          {
              (⍬ ⋄ )
          }Is,⊂⍬
          {
              0⍴⊂⍬
          }Is 0⍴⊂⍬
          {
              0⍴⊂⊂⍬
          }Is 0⍴⊂⊂⍬
          {
              0⍴⊂0⍴⊂⍬
          }Is 0⍴⊂0⍴⊂⍬
          {[⍬ ⋄ ]
          }Is⍉⍪⍬
          {
              ⍉[⍬ ⋄ ]
          }Is⍪⍬
          {
              0⍴⊂[⍬ ⋄ ]
          }Is 0⍴⊂⍉⍪⍬
          {
              0⍴⊂⍉[⍬ ⋄ ]
          }Is 0⍴⊂⍪⍬
      :EndSection
     
      :Section Namespace
          {
              ()
          }Is'{}'
     
          {
              (
              )
          }Is'{}'
     
          {
              ()()
          }Is'[{},{}]'
     
          {
              (a:⍳n←3 ⋄ b:n*2)
          }Is'{"a":[0,1,2],"b":9}'
     
          {
              (p:{⍺+⍵}
              m:{⍺-⍵})
          }Is'p:{⍺+⍵}' 'm:{⍺-⍵}'
     
          {
              (v:(1 2 ⋄ 3))
          }Is'{"v":[[1,2],3]}'
     
          {
              (v:(1 2
              3))
          }Is'{"v":[[1,2],3]}'
     
          {
              (v:(1 2 ⋄ 3)
              )
          }Is'{"v":[[1,2],3]}'
     
          {
              (
              ()
              )
          }Is'[{}]'
     
          {(n:())}Is'{"n":{}}'
     
      :EndSection
      r←1
    ∇


    ∇ r←DeserialiseQA stop_on_error;⎕IO;Is;⎕TRAP
      ⎕IO←0
      ⎕TRAP←(~stop_on_error)/⊂999 'C' '→r←0'
      Is←{
          Check←'MISMATCH'⎕SIGNAL 999/⍨⍵∘≢
          a←⍺⍺ Inline 1
          ×⎕NC'⍺':Check a.⎕NR ⍺
          Check{⎕JSON⍣(326∊⎕DR¨∊⍵)⊢⍵}⍣(⍵≢⎕NULL)⊢a
      }
     
      :Section scalars
          {
              'a'
          }Is'a'
          {
              42
          }Is 42
          {
              ⎕NULL
          }Is ⎕NULL
          {
              ⎕UCS 0
          }Is ⎕UCS 0
      :EndSection
      :Section vectors
          {(42 ⋄ )}Is,42
     
          {(42
              )}Is,42
     
          {'Hello',⎕AV}Is'Hello',⎕AV
     
          {
              (1 2 3 'Hello' ⋄ 4 5 6 'World')
          }Is(1 2 3 'Hello')(4 5 6 'World')
     
          {
              (1 2 3 'Hello'
              4 5 6 'World')
          }Is(1 2 3 'Hello')(4 5 6 'World')
     
          {
              (0 1 ⋄ 2 3
              4 5 ⋄ 6 7)
          }Is↓4 2⍴⍳8
     
          {
              ('Three'
              'Blind'
              'Mice')
          }Is'Three' 'Blind' 'Mice'
      :EndSection
      :Section Matrices
          {[0 1 2
              3 4 5]
          }Is 2 3⍴⍳6
     
          {[ ⋄ 0 1 2 3]
          }Is⍉⍪⍳4
     
          {[
              0 1 2 3
              ]
          }Is⍉⍪⍳4
     
          {['Three'
              'Blind'
              'Mice']
          }Is 3 5⍴'ThreeBlindMice '
     
          {[1 ⋄ ]
          }Is⍪1
     
          {
              1 2[1 ⋄ ]
          }Is 1 2(⍪1)
      :EndSection
      :Section Combo
          {
              ([0 0 1
              1 0 1
              0 1 1]
     
              [0 1 1
              1 1 0
              0 1 0]
     
              [0 1 1 1
              1 1 1 0]
     
              [0 1 1 0
              1 0 0 1
              0 1 1 0])
     
          }Is Ed{
              _←⍉⍪0 0 1
              _⍪←1 0 1
              _⍪←0 1 1
              r←⊂_
              _←⍉⍪0 1 1
              _⍪←1 1 0
              _⍪←0 1 0
              r,←⊂_
              _←⍉⍪0 1 1 1
              _⍪←1 1 1 0
              r,←⊂_
              _←⍉⍪0 1 1 0
              _⍪←1 0 0 1
              _⍪←0 1 1 0
              r,←⊂_
              r
          }⍬
     
          {[0 'OK' ⋄ 1 'WS FULL' ⋄ 2 'SYNTAX ERROR' ⋄ 3 'INDEX ERROR' ⋄ 4 'RANK ERROR']
          }Is{
              e←⍉⍪0 'OK'
              e⍪←1 'WS FULL'
              e⍪←2 'SYNTAX ERROR'
              e⍪←3 'INDEX ERROR'
              e⍪←4 'RANK ERROR'
              e
          }⍬
          {['a'(⊂1 2)'a'
              (⊂1 2)'a'(⊂1 2)]
          }Is 2 3⍴'a'(⊂1 2)
      :EndSection
     
      :Section High Rank
          {
              [[3
              1 5 9]
              [2 7 1
              2 8]]
          }Is Ed 2 2 3⍴3 0 0 1 5 9 2 7 1 2 8 0
      :EndSection
     
      :Section Empty
          {
              ⍬
          }Is ⍬
          {
              (⍬ ⋄ )
          }Is,⊂⍬
          {
              0⍴⊂⍬
          }Is 0⍴⊂⍬
          {
              0⍴⊂⊂⍬
          }Is 0⍴⊂⊂⍬
          {
              0⍴⊂0⍴⊂⍬
          }Is 0⍴⊂0⍴⊂⍬
          {[⍬ ⋄ ]
          }Is⍉⍪⍬
          {
              ⍉[⍬ ⋄ ]
          }Is⍪⍬
          {
              0⍴⊂[⍬ ⋄ ]
          }Is 0⍴⊂⍉⍪⍬
          {
              0⍴⊂⍉[⍬ ⋄ ]
          }Is 0⍴⊂⍪⍬
      :EndSection
     
      :Section Namespace
          {
              ()
          }Is'{}'
     
          {
              (
              )
          }Is'{}'
     
          {
              ()()
          }Is'[{},{}]'
     
          {
              (a:⍳n←3 ⋄ b:n*2)
          }Is'{"a":[0,1,2],"b":9}'
     
          'p' 'm'{
              (p:+
              m:{⍺-⍵})
          }Is¨(,'+')(,⊂' m←{⍺-⍵}')
     
          {
              (v:(1 2 ⋄ 3))
          }Is'{"v":[[1,2],3]}'
     
          {
              (v:(1 2
              3))
          }Is'{"v":[[1,2],3]}'
     
          {
              (v:(1 2 ⋄ 3)
              )
          }Is'{"v":[[1,2],3]}'
     
          {
              (
              ()
              )
          }Is'[{}]'
     
          {(n:())}Is'{"n":{}}'
     
      :EndSection
      r←1
    ∇




    ∇ r←RoundtripQA stop_on_error;⎕IO;Is;⎕TRAP
      ⎕IO←0
      ⎕TRAP←(~stop_on_error)/⊂999 'C' '→r←0'
      Is←{
          Check←'MISMATCH'⎕SIGNAL 999/⍨≢
          ⍝ identical nss don't match, so we compare the generated notation:
          9∊{⊃⎕NC'⍵'}¨∊⍵:(Serialise ⍵)Check Serialise Deserialise Serialise ⍵
          ⍵ Check Deserialise Serialise ⍵
      }
     
      :Section scalars
          Is'a'
          Is 42
          Is ⎕NULL
          Is ⎕UCS 0
      :EndSection
      :Section vectors
          Is,42
          Is,42
          Is'Hello',⎕AV
          Is(1 2 3 'Hello')(4 5 6 'World')
          Is(1 2 3 'Hello')(4 5 6 'World')
          Is↓4 2⍴⍳8
          Is'Three' 'Blind' 'Mice'
      :EndSection
      :Section Matrices
          Is 2 3⍴⍳6
          Is⍉⍪⍳4
          Is⍉⍪⍳4
          Is 3 5⍴'ThreeBlindMice '
          Is⍪1
          Is 1 2(⍪1)
      :EndSection
      :Section Combo
          Is{
              _←⍉⍪0 0 1
              _⍪←1 0 1
              _⍪←0 1 1
              r←⊂_
              _←⍉⍪0 1 1
              _⍪←1 1 0
              _⍪←0 1 0
              r,←⊂_
              _←⍉⍪0 1 1 1
              _⍪←1 1 1 0
              r,←⊂_
              _←⍉⍪0 1 1 0
              _⍪←1 0 0 1
              _⍪←0 1 1 0
              r,←⊂_
              r
          }⍬
     
          Is{
              e←⍉⍪0 'OK'
              e⍪←1 'WS FULL'
              e⍪←2 'SYNTAX ERROR'
              e⍪←3 'INDEX ERROR'
              e⍪←4 'RANK ERROR'
              e
          }⍬
          Is 2 3⍴'a'(⊂1 2)
          Is 3 3⍴(,¨'1' '0' '1')
      :EndSection
     
      :Section High Rank
          Is 2 2 3⍴3 0 0 1 5 9 2 7 1 2 8 0
      :EndSection
     
      :Section Empty
          Is ⍬
          Is,⊂⍬
          Is 0⍴⊂⍬
          Is 0⍴⊂⊂⍬
          Is 0⍴⊂0⍴⊂⍬
          Is⍉⍪⍬
          Is⍪⍬
          Is 0⍴⊂⍉⍪⍬
          Is 0⍴⊂⍪⍬
      :EndSection
     
      :Section Namespace
          Is ⎕JSON'{}'
          Is ⎕JSON'{}'
          Is ⎕JSON'[{},{}]'
          Is ⎕JSON'{"a":[0,1,2],"b":9}'
          Is{
              ⍺←⎕NS ⍬
              ⍺.p←{⍺+⍵}
              ⍺.m←{⍺-⍵}
              ⍺
          }⍬
          Is ⎕JSON'{"v":[[1,2],3]}'
          Is ⎕JSON'{"v":[[1,2],3]}'
          Is ⎕JSON'{"v":[[1,2],3]}'
          Is ⎕JSON'[{}]'
          Is ⎕JSON'{"n":{}}'
      :EndSection
      r←1
    ∇


    ∇ r←QA
    ⍝ fails under 18.0 because of mantis 18132
      r←SerialiseQA 1
      r∧←DeserialiseQA 1
      r∧←RoundtripQA 1
    ∇

:EndNamespace
