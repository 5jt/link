:Namespace Hooks
    ⎕ML←1 ⋄ ⎕IO←1

      Handle←{ ⍝ Generate hash using dfns.chksum
          9{⎕IO ⎕ML←0 1                     ⍝ Simple ⍺-digit checksum.
     
              bvec←{                              ⍝ byte-vector.
                  sub←{(⍴⍵)bvec,⍵}                ⍝ bvec of sub-item.
                  0∊⍴⍵:⍺ pref sub⊃⍵               ⍝ null:      prototypical item.
                  (⍺≡⍬)∧isref⊃⍵:⍬                 ⍝ ref:       ignored.
                  ⍵≡,⎕NULL:⍬                      ⍝ ⎕null:     ignored.
                  6=10|⎕DR ⍵:⍺ pref↑,/sub¨⍵       ⍝ nested:    cat of sub-vectors.
                  11=⎕DR ⍵:⍺ pref ⍵               ⍝ boolean:   items of array.
                  2|⎕DR ⍵:⍺ pref bytes ⍵          ⍝ numeric:   bytes of array.
                  ⍺ pref bytes ⎕UCS ⍵             ⍝ character: unicode indices.
              }
     
              isref←{9=⎕NC'⍵'}                    ⍝ namespace reference.
              bytes←{256|83 ⎕DR ⍵}                ⍝ data bytes.
              pref←{(bytes ⍺,¯1),⍵}               ⍝ prefixed shape vector.
              wsum←{⍵+.×1+⍳⍴⍵}                    ⍝ weighted sum.
     
              ⍺←6 ⋄ (10*⍺)|wsum(⍴⍵)bvec,⍵         ⍝ ⍺-digit weighted sum of byte-vector.
          }⍤1⊢⍵
      }

    ∇ {handle}←Register efp ⍝ ... prioritised callback
      ⍝ Argument must be (event fn priority) or matrix of such rows
      ;event
     
      :If 2=≢⍴efp ⍝ mat
          :Trap 11
              handle←Register⍤1⊢efp ⍝ process rows
          :Else
              →ERROR
          :EndTrap
     
      :ElseIf (,3)≡⍴efp ⍝ 3-element vec
      :AndIf '' ''≡0⌿¨2↑efp ⍝ first 2 must be strings
          Init event←⊃efp
          ⍎event,'←Norm ',event,'⍪1↓efp'
          handle←Handle efp
     
      :Else
     ERROR:⎕SIGNAL⊂('EN' 11)('Message' 'Argument must be (event fn priority) or matrix of such rows')
      :EndIf
    ∇

    ∇ {removed}←Deregister handle ⍝ ... prioritised callback
      ⍝ Handle must be integer(s)
      ;events;event;remove;kept;hooks
     
      :If ~1 3∊⍨⎕DR handle
          events←⎕A ⎕NL ¯2 ⍝ all globals that begin with capital letter
          removed←0 3⍴⊂''
          :For event :In events
              Init event
              hooks←(⊂event),⍎event
              remove←handle∊⍨Handle hooks
              removed⍪←remove⌿hooks
              kept←hooks⌿⍨~remove
              ⍎event,'←kept'
          :EndFor
          removed←,⍣(⍬≡⍴handle)⊢removed
     
      :Else
          ⎕SIGNAL⊂('EN' 11)('Message' 'Handle must be integer(s)')
      :EndIf
    ∇

    ∇ {created}←Init event ⍝ global var for event
      ⍝ Event must be character vector(s) in correct case
      ;hooks;val
     
      :If 2=|≡event
          :Trap 11
              created←Init¨event
          :Else
              →ERROR
          :EndTrap
     
      :ElseIf ~2|⎕DR event ⍝ char
      :AndIf 1≥≢⍴event ⍝ vector
      :AndIf ⎕A∊⍨⊃event ⍝ capital
          val←0 2⍴⊂''
          :If ~created←2≠⊃⎕NC event
              hooks←⊆⍎event ⍝ must be 2-column matrix of (priority,fn) pairs
              hooks⍴⍨←¯2↑1 1,⍴hooks ⍝ mat
              hooks↑⍨←¯2,⍨≢hooks ⍝ 2-col
              :If ∧/{''≡0⌿⍵}¨⊣/hooks ⍝ char left-col
                  val←hooks
              :EndIf
          :EndIf
          ⍎event,'←val'
     
      :Else
     ERROR:⎕SIGNAL⊂('EN' 11)('Message' 'Event must be character vector(s) in correct case')
      :EndIf
    ∇

    Norm←{∪⍵⌷⍨⊂⍋⌽⍵}

    ∇ hooks←Registered event ⍝ report callbacks
      ⍝ Event must be character vector(s) in correct case
     
      :If 2=|≡event
          :Trap 11
              hooks←⊃⍪⌿(⊂,Registered)¨event
          :Else
              →ERROR
          :EndTrap
      :ElseIf (⊂event)∊⍬''
          hooks←Registered ⎕A ⎕NL ¯2
     
      :ElseIf ''≡0⌿event ⍝ charvec
      :AndIf ⎕A∊⍨⊃event ⍝ capital
          :If (⊂,event)∊⎕A ⎕NL ¯2 ⍝ exists?
              hooks←Norm⍎event
          :Else
              hooks←0 2⍴⊂''
          :EndIf
     
      :Else
     ERROR:⎕SIGNAL⊂('EN' 11)('Message' 'Event must be character vector(s) in correct case')
      :EndIf
    ∇

:EndNamespace
