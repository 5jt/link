 msg←{opts}Export(src dest);arrays;container;defopts;dir;failed;fixed;nc;ns;ok;rawsrc;single;⎕IO;⎕ML;setconfig;setopts;z;there;ref;nss;links;file;config;rc;merge;json
 ⎕IO ⎕ML←1 1
 setconfig←src Config.GetConfig'' ⍝ Config options actually set in the folder or user config
 :If U.debug=2
     (1+⊃⎕LC)⎕STOP⊃⎕SI
 :EndIf
 :Trap DEBUG↓0
     (container src)←⎕RSI ⎕XSI U.ContainerNs rawsrc←src

     (defopts←⎕NS ⍬).(overwrite arrays sysvars caseCode)←0 0 0 0
     :If 0=⎕NC'opts' ⋄ opts←⎕NS''
     :ElseIf ''≡0⍴opts ⋄ opts←⎕SE.Dyalog.Array.Deserialise opts
     :EndIf
     opts←opts Config.MergeOpts setconfig ⍝ Merge configured options in

     :If 0≠≢links←⎕SE.Link.Links
     :AndIf (⊂src)∊links.ns               ⍝ If exporting a linked namespace
     :AndIf ⎕NEXISTS file←links[links.ns⍳⊂src].dir,'/.linkconfig'
     :AndIf 0=⊃(rc config)←Config.ReadConfigFile file
         config.Settings.⎕EX(config.Settings.⎕NL ¯2)~defopts.⎕NL ¯2
         opts←opts Config.MergeOpts config ⍝ ... merge settings found in .linkconfig in
     :EndIf

     'setopts'⎕NS ⎕OR'opts' ⍝ Record options that were set for writing .linkconfig file
     opts←defopts U.DefaultOpts opts

     :If ~opts.overwrite∊0 1 ⋄ U.Error'Invalid value ',(⍕opts.overwrite),' for modifier "overwrite" - must be one of: 0 1' ⋄ :EndIf

     :If ¯1=nc←container U.NameClass src ⍝ either invalid name or ref to unnamed namespace
         U.Error'Not a properly named namespace: ',,⍕rawsrc
     :ElseIf 0=nc
         U.Error'Source not found: ',src
     :ElseIf U.Slash⊃⌽src
         U.Error'Trailing slash reserved for future extension'
     :Else
         :If single←¯9.1≠nc ⋄ :AndIf opts U.HasExtn dest  ⍝ dest is a file
             dir←⊃⎕NPARTS dest←0 U.NormFile dest
         :Else                                            ⍝ dest is a directory
             dir←dest←0 U.NormDir dest
         :EndIf
         :If single
             ns←⊃U.SplitNs src←container U.NormName src  ⍝ single name is relative to calling namespace (container) because there is no implicit namespace
             arrays←1   ⍝ always export single array
         :Else
             ns←src←U.NormNs src                      ⍝ src is an unscripted namespace
         :EndIf

         opts.watch←'none'   ⍝ prevent tying to the files
         opts.source←'ns'
         opts.ns←ns
         opts.dir←dir

         (fixed failed)←opts U.WriteFiles src dest opts.overwrite
         ⍝ Now write config file
         z←⎕NS''
         z.Settings←Config.ExpungeDefaultParams setopts
         :If 0≠≢z.Settings.⎕NL ¯2 ⍝ Don't write a file with no settings
             json←1 ⎕JSON⍠('Dialect' 'JSON5')('HighRank' 'Split')('Compact' 0)⊢z
             (⊂json)⎕NPUT dir,'/.linkconfig'
         :EndIf

         :If ~single
             msg←⊂'Exported: ',ns,' → ',U.WinSlash dir
             :If ×≢failed ⋄ msg,←(⊂'ERRORS ENCOUNTERED: ',(⍕≢failed),' export(s) failed:'),failed ⋄ :EndIf
         :ElseIf ×≢failed ⋄ msg←⊂'ERRORS ENCOUNTERED: Export failed: ',⊃failed
         :Else ⋄ msg←⊂'Exported: ',src,' → ',U.WinSlash fixed
         :EndIf
         msg←1↓U.FmtLines msg
     :EndIf
 :Else
     U.Resignal 1
 :EndTrap
