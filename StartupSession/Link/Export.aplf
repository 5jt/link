 msg←{opts}Export(src dest);defopts;dir;failed;fixed;name;nc;ns;single;⎕IO;⎕ML
 ⎕IO ⎕ML←1 1
 :If U.debug=2
     (1+⊃⎕LC)⎕STOP⊃⎕SI
 :EndIf
 :Trap DEBUG↓0
     (defopts←⎕NS ⍬).(overwrite)←0
     opts←defopts U.DefaultOpts⍎⎕NS∘⍬⍣(900⌶⍬)⊢'opts' ⍝ monadic?
     :If ~opts.overwrite∊0 1 ⋄ U.Error'Invalid value ',(⍕opts.overwrite),' for modifier "overwrite" - must be one of: 0 1' ⋄ :EndIf

     src←⊃⌽⎕RSI ⎕XSI U.ContainerNs src

     :If 0 ¯1∊⍨⌊nc←U.NameClass src
         U.Error'Source not found: ',src
     :Else
         :If single←¯9.1≠nc ⋄ :AndIf opts U.HasExtn dest  ⍝ dest is a file
             dir←⊃⎕NPARTS dest←0 U.NormFile dest
         :Else                                            ⍝ dest is a directory
             dir←dest←0 U.NormDir dest
         :EndIf
         :If single ⋄ (ns name)←U.SplitNs src ⋄ ns←U.NormNs ns ⋄ src←ns,'.',name   ⍝ src is any APL name
         :Else ⋄ ns←src←U.NormNs src                      ⍝ src is an unscripted namespace
         :EndIf
         opts.watch←'none'   ⍝ prevent tying to the files
         opts.source←'ns'
         opts.ns←ns
         opts.dir←dir

         (fixed failed)←opts U.WriteFiles src dest single opts.overwrite  ⍝ allow exporting array only if single name

         :If ~single
             msg←⊂'Exported: ',ns,' → ',U.WinSlash dir
             :If ×≢failed ⋄ msg,←(⊂(⍕≢failed),' failed:'),failed ⋄ :EndIf
         :ElseIf ×≢failed ⋄ msg←⊂'Export failed: ',⊃failed
         :Else ⋄ msg←⊂'Exported: ',src,' → ',U.WinSlash fixed
         :EndIf
         msg←1↓U.FmtLines msg
     :EndIf
 :Else
     U.Resignal 1
 :EndTrap
