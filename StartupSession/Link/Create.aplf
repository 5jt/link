 msg←{opts}Create(ns dir)
 ;isWin;z;links;fsw;ix;linkDef;outFail;inFail;nsref;win;nsrefs;link;arrow;⎕IO
 :If U.debug=2
     (1+⊃⎕LC)⎕STOP⊃⎕SI
 :EndIf
 :Trap DEBUG↓0
     ⎕IO←1

     '⎕SE.Link'⎕NS ⍬
     :If 0=⎕NC'⎕SE.Link.Links'    ⍝ Check existence of our data structure
         ⎕SE.Link.Links←⍬         ⍝ Start with no links
 ⍝ Link namespaces will record switch values
 ⍝    and also contain fsw, the FileSystemWatcher object
     :EndIf

     opts←U.DefaultOpts⍎⎕NS∘⍬⍣(900⌶⍬)⊢'opts' ⍝ monadic?
     ns←⊃⌽⎕RSI ⎕XSI U.ContainerNs ns
     msg←⍕⍬⊤⍬

     :If ~U.CanWatch
     :AndIf (⊂opts.watch)∊'both' 'dir'
         msg←'Watching directories is only supported if .NET is available'
     :ElseIf opts.source≡'dir'
     :AndIf {22::1 ⋄ 1≠1 ⎕NINFO ⍵}dir
         msg←'Source directory not found: ',dir
     :ElseIf U.Slash⊃⌽dir
         msg←'Trailing slash reserved for future extension'
     :ElseIf opts.source≡'ns'
     :AndIf 0=⎕NC ns
         msg←'Source namespace not found: ',ns
     :ElseIf 0=≢nsref←(1 U.GetRefTo)ns ⍝ must be normal namespace
         msg←'Not a namespace: ',ns
     :ElseIf ×≢⎕SE.Link.Links
     :AndIf nsref∊nsrefs←⍎¨⎕SE.Link.Links.ns
         link←⎕SE.Link.Links⊃⍨nsrefs⍳nsref
         msg←'Already linked: ',U.Arrow link
     :ElseIf U.IsScripted nsref
         msg←'Cannot link to scripted namespaces: ',ns
     :ElseIf ~⎕NEXISTS dir
     :AndIf ~3 ⎕MKDIR dir
         msg←'Directory not found: ',dir
     :ElseIf 0⊣'both'≡opts.source
     :AndIf ∧/0≠(≢nsref.⎕NL-⍳10),≢⊃(⎕NINFO⍠1)dir,'/*'
         msg←'Source must be specified when linking a non-empty namespace to a non-empty directory'
     :ElseIf opts.(flatten∧source≢'dir')
         msg←'flatten≡1 requires source≡''dir'''
     :Else
         ⍝ We're all good; do it!
         opts.ns←ns←U.NormNs ns
         opts.dir←dir←0 U.NormDir dir

         inFail←outFail←fsw←⍬
         ix←'[',(⍕(0(86⌶)'⎕IO')+≢⎕SE.Link.Links),']'     ⍝ fix ⎕IO!
         msg←0⍴⊂''
         :If 'ns' 'both'∊⍨⊂opts.source
             outFail←opts U.WriteFiles ns dir
         :AndIf 0≠≢outFail
             msg,←⊂(⍕≢outFail),' export(s) failed (⎕SE.Link.Links',ix,'.outFail)'
         :EndIf

         :If 'dir' 'both'∊⍨⊂opts.source
             inFail←opts U.FixFiles nsref dir
         :AndIf 0≠≢inFail
             msg,←⊂(⍕≢inFail),' imports failed (⎕SE.Link.Links',ix,'.inFail)'
         :EndIf

         linkDef←⎕SE.⎕NS opts
         'linkDef'⎕NS'inFail' 'outFail'
         :If 'dir' 'both'∊⍨⊂opts.watch
             linkDef.fsw←FileSystemWatcher.Watch dir(,'*')
         :Else
             linkDef.fsw←⍬
         :EndIf

         arrow←U.Arrow linkDef
         linkDef.⎕DF 1⌽'][',arrow
         ⎕SE.Link.Links,←linkDef
         msg←⊃{⍺,'; ',⍵}/msg,⍨⊂'Linked: ',arrow
     :EndIf
 :Else
     U.Resignal 1
 :EndTrap
