 msg←{opts}Create(ns dir);emptydir;emptyns;hasdir;hasns;rsi;xsi
 ;links;fsw;ix;outFail;inFail;nsref;nsrefs;link;arrow;⎕IO
 :If U.debug=2
     (1+⊃⎕LC)⎕STOP⊃⎕SI
 :EndIf
 :Trap DEBUG↓0
     ⎕IO←1

     '⎕SE.Link'⎕NS ⍬
     :If 0=⎕NC'⎕SE.Link.Links'    ⍝ Check existence of our data structure
         ⎕SE.Link.Links←⍬         ⍝ Start with no links
 ⍝ Link namespaces will record switch values
 ⍝    and also contain fsw, the FileSystemWatcher object
     :EndIf

     opts←U.DefaultOpts⍎⎕NS∘⍬⍣(900⌶⍬)⊢'opts' ⍝ monadic?
     ns←⊃⌽(rsi xsi←⎕RSI ⎕XSI)U.ContainerNs ns
     msg←⍕⍬⊤⍬

     :Trap 22 ⋄ hasdir←1 ⋄ emptydir←0∊⍴⊃(⎕NINFO⍠1)dir,'/*'
     :Else ⋄ hasdir←0 ⋄ emptydir←1
     :EndTrap
     :If hasns←9=⎕NC ns ⋄ emptyns←0∊⍴(⍎ns).⎕NL-⍳10
     :Else ⋄ emptyns←1
     :EndIf

     :If ~U.CanWatch
     :AndIf (⊂opts.watch)∊'both' 'dir'
         msg←'Watching directories is only supported if .NET is available'
     :ElseIf opts.source≡'dir'
     :AndIf ~hasdir
         msg←'Source directory not found: ',dir
     :ElseIf opts.source≡'dir'
     :AndIf ~emptyns
         msg←'Destination namespace not empty: ',ns
     :ElseIf opts.source≡'ns'
     :AndIf ~hasns
         msg←'Source namespace not found: ',ns
     :ElseIf opts.source≡'ns'
     :AndIf ~emptydir
         msg←'Destination directory not empty: ',dir
     :ElseIf opts.source≡'auto'
     :AndIf emptydir⍱emptyns
         msg←'Cannot link a non-empty namespace to a non-empty directory: ',ns,' ←→ ',dir
     :ElseIf 0=≢nsref←1 U.GetRefTo ns  ⍝ attempt to create namespace if it doesn't exist
         msg←'Not a namespace: ',ns
     :ElseIf U.IsScripted nsref
         msg←'Cannot link to scripted namespaces: ',ns
     :ElseIf ×≢⎕SE.Link.Links
     :AndIf nsref∊nsrefs←⍎¨⎕SE.Link.Links.ns
         link←⎕SE.Link.Links⊃⍨nsrefs⍳nsref
         msg←'Already linked: ',U.Arrow link
     :ElseIf ~hasdir
     :AndIf ~3 ⎕MKDIR dir  ⍝ attempt to create directory if it doesn't exist
         msg←'Directory not found: ',dir
     :ElseIf U.Slash⊃⌽dir
         msg←'Trailing slash reserved for future extension'
     :Else
         :If opts.source≡'auto'  ⍝ detect actual source
             :If hasns<hasdir
             :OrIf (hasns=hasdir)∧(emptydir≤emptyns)  ⍝ if have both, see which is not empty, if both empty, dir wins
                 opts.source←'dir'
             :Else
                 opts.source←'ns'
             :EndIf
         :EndIf
         :If opts.(flatten∧source≢'dir')
             msg←'flatten≡1 requires source≡''dir'''
             :Return
         :EndIf
         ⍝ We're all good; do it!
         opts.ns←ns←U.NormNs ns
         opts.dir←dir←0 U.NormDir dir

         inFail←outFail←0⍴⊂'' ⋄ fsw←⍬
         ix←'[',(⍕((U.UcmdStacks xsi)(86⌶)'⎕IO')+≢⎕SE.Link.Links),']'     ⍝ fix ⎕IO!
         msg←0⍴⊂''
         :If 'ns'≡opts.source
             outFail←opts U.WriteFiles ns dir
         :AndIf 0≠≢outFail
             msg,←⊂(⍕≢outFail),' export(s) failed (⎕SE.Link.Links',ix,'.outFail)'
         :EndIf

         :If 'dir'≡opts.source
             inFail←opts U.FixFiles nsref dir
         :AndIf 0≠≢inFail
             msg,←⊂(⍕≢inFail),' import(s) failed (⎕SE.Link.Links',ix,'.inFail)'
         :EndIf

         'opts'⎕NS'inFail' 'outFail'
         :If 'dir' 'both'∊⍨⊂opts.watch
             opts.fsw←FileSystemWatcher.Watch dir(,'*')
         :Else
             opts.fsw←⍬
         :EndIf

         arrow←U.Arrow opts
         opts.⎕DF 1⌽'][',arrow
         ⎕SE.Link.Links,←opts
         msg←⊃{⍺,'; ',⍵}/msg,⍨⊂'Linked: ',arrow
     :EndIf
 :Else
     U.Resignal 1
 :EndTrap
