:Namespace U ⍝ Utilities

    :Section Constants
    isWindows←'Win'≡3↑⊃# ⎕WG'APLVersion'
    ∇ (canwatch dotnetcore)←_CanWatch;⎕USING
      :Trap 0
        ⍝ Try .Net Core rather than Framework if non-Windows or DYALOG_NETCORE explicitly set
          dotnetcore←(~isWindows)∨(,'1')≡2 ⎕NQ'.' 'GetEnvironment' 'DYALOG_NETCORE'
          ⎕USING←',System',(~dotnetcore)/'.dll'
          canwatch←9.6=⎕NC⊂'System.IO.FileSystemWatcher'
      :Else
          canwatch←dotnetcore←0
      :EndTrap
    ∇
    (CanWatch DotNetCore)←_CanWatch ⍝ cache result
    ∇ d←debug
      :If 0=⎕NC'##.DEBUG'
          d←##.DEBUG←0
      :Else
          d←##.DEBUG
      :EndIf
    ∇
    :EndSection


    :Section APL covers
      OnEach←{ ⍝ ¨ without prototype call on empty
          0∊⍴⍵:⍵   ⍝ if empty return empty
          ⍺←⊢      ⍝ ambivalent
          1:_←⍺ ⍺⍺¨⍵   ⍝ shy call
      }
    :EndSection


    :Section Stack Frames      ⍝ Tacit necessary to avoid them
    Resignal←⎕SIGNAL{⍺←'' ⋄ ⍵/⊂⎕DMX.(('EN'(EN+11×EN=0))('EM' EM)('Message'(Message,⍺)))}
        Check←{⍺←0⋄⍺}⍴⍨¯1∊∘⎕NC⊢⊆⍨'/'≠⊢ ⍝ leave early if any bad name
    If←⍴⍨
    ERRNO←99              ⍝ official API error number
    Error←⎕SIGNAL∘ERRNO
    :EndSection



    :Section Strings
    Shortest←{⍵⊃⍨{⍵⍳⌊/⍵}≢¨⍵}                ⍝ Shortest string in list
    Case←{⍺(819⌶)¨⍵}                        ⍝ Upper/Lower case
    LCase←{819⌶⍵}                           ⍝ Lower case
    Join←{(⍕⍺),⍺⍺,(⍕⍵)}                     ⍝ Join using ⍺⍺
    Slash←{⍵∊'/\'}                          ⍝ Mark slashes
    Parts←{⍵⊆⍨~Slash ⍵}                     ⍝ Path parts
    TilLast←{⍵↓⍨-⍺⍳⍨⌽⍵}
    Path←'/'∘TilLast                        ⍝ Until last slash
    Parent←'.'∘TilLast                      ⍝ Until last dot
    PadThis←{⍵,'⎕THIS'/⍨0=≢⍵}               ⍝ Default path to here
    NsExpr←{'''',⍵,'''⎕NS⍬'}                ⍝ Expression to create namespace
    Begins←{⊃⍺⍷⍵}                           ⍝ ⍵ starts with ⍺
    WinSlash←'\'@Slash⍣isWindows            ⍝ force windows slashes only on windows machines
    DotSlash←'.'@Slash                      ⍝ Convert dots to slashes
        Combine←{(⍕⍺),⍨(326≠⎕DR ⍺)/'.',⍨⍕⍵}/
    List←{∊{' ',⍕⍵}¨⍵}
      Arrow←{                               ⍝ appropriate symbol to show ns-dir connection
          lr←'←→'/⍨2 2⊤'ns' 'dir' 'both'⍳⊂⍵.watch
          ⍵.ns,' ',lr,' ',WinSlash ⍵.dir
      }

    :EndSection


    :Section Covers for I-beams and other built-ins
    CurrentFileName←{4⊃⍺.(5179⌶)⍵}   ⍝ Return current file name tied to apl name ⍵ in namespace ⍺
    CurrentHash←{7⊃⍺.(5179⌶)⍵}       ⍝ Return current hash of tied file
    Where←{⍵⌿⍺}                      ⍝ Filter as function
    GetFileInfo←{5174⌶⍵}             ⍝ Return links to file
      GetFile←{
          11::⊃⎕NGET ⍵ 1                     ⍝ 17.0 Unicode
          ⊃⎕NGET⍠'ContentType' 'APLCode'⊢⍵ 1 ⍝ 17.1+ Classic
      }
      GetInfos←{
          ''≡0⍴⍵:∇'name' 'parent' 'nc' 'file' 'line' 'lines' 'hash' 'ts'⍳⊂⍵
          ⍵∘⊃¨5177⌶⍬
      }
    Untie←{1:_←5178⌶⍵}  ⍝ untie an apl name from its file
    ∇ r←RemoveFileLinksIn rootns;all;allrefs;urefs;mask;t;remove
     ⍝ Find all file system links to objects below rootns, and remove using 5178⌶
     ⍝ Return number of links broken
      allrefs←2⊃¨all←5177⌶⍬
      t←urefs←∪allrefs
      mask←(≢urefs)⍴0
      :If 0≠≢t
          :Repeat
              mask∨←t∊rootns ⍝ Have we reached rootns?
              t←t.##         ⍝ Move all pointers up to parent
          :Until t≡t.##      ⍝ Continue until everything is "root"
      :EndIf
      :If 0≠r←≢remove←(allrefs∊mask/urefs)/all ⍝ links to be removed
          r←+/5178⌶¨(⍕¨2⊃¨remove),¨'.',¨⍕¨1⊃¨remove
      :EndIf
    ∇
    :EndSection



    :Section Files

    ∇ path←Enslash path
      path,←'/'/⍨~'/\'∊⍨⊃⌽path ⍝ append trailing slash if missing
    ∇
    ∇ path←Deslash path
      path↓⍨←-+/∧\⌽path∊'/\'  ⍝ remove trailing slash
    ∇
    NormFile←{⍺<0=≢⍵:⍵ ⋄ ∊1⎕NPARTS ⍵}  ⍝ ⍺=1 : '' means current directory
    ∇ dir←trail NormDir dir
      dir←∊1 ⎕NPARTS dir            ⍝ normalise - '' means current dir
      :If trail ⋄ dir←Enslash dir
      :Else ⋄ dir←Deslash dir
      :EndIf
    ∇
    ∇ mask←opts HasExtn files;act;exp;regex
    ⍝ mask of files that have valid extensions
      exp←opts.(codeExtensions,customExtensions,⊢/typeExtensions) ⍝ all interesting extensions
      act←{1↓⊃⌽⎕NPARTS ⍵}¨,⊆files    ⍝ actual extensions
      ⍝ regex special characters : .$^{[(|)*+?\
      regex←'^' '$' '[\^\$]' '\*' '\?'⎕R'^' '$' '\\\0' '.*' '.'⊢exp ⍝ convert glob to regex
      mask←1@(⎕IO+regex ⎕S 2⊢act)⊢(⍴act)⍴0
      :If (1=≡,files)∨(0=⍴⍴files) ⋄ mask←⊃mask ⋄ :EndIf
    ∇

      Tail←{ ⍝ ⍺:opts; ⍵:nc
          ¯9=⍵:'/'    ⍝ trad namespace are given name class ¯9
          (types exts)←↓⍉⍺.typeExtensions
          exts,←⊂'dyalog'
          exts,¨⍨←'.'
          exts⊃⍨⌊/types⍳⍵,⌊⍵
      }
      ApplyOldExtn←{ ⍝ Correct new extension to .dyalog if old source exists
          (dir name ext)←⎕NPARTS ⍵
          ext≡'.dyalog':⍵
          alt←dir,name,'.dyalog'
          (⎕NEXISTS alt)>(⎕NEXISTS ⍵):alt
          ⍵
      }

    Ancestry←{((¯1+⍵⍳'/')↑⍵)∘,¨,\('/'=⍵)⊂⍵}

    FileHash←{2 ⎕NQ #'GetBuildID' ⍵}

      IsDir←{
          22::0
          1=1 ⎕NINFO ⍵
      }

      Into←{ ⍝ Put vtv ⍺ into file ⍵ - return success
          22::0                  ⍝ no file access
          _←3 ⎕MKDIR⊃1 ⎕NPARTS ⍵ ⍝ create dir if needed
          1⊣(⊂⍺)⎕NPUT ⍵ 1        ⍝ overwrite
      }


    ∇ name←CaseCode name;bin;digits;len;⎕IO
      ⎕IO←0
      →0 If 0=≢name  ⍝ empty name doesn't get case coded
      bin←name≠819⌶name
      len←⌈3÷⍨≢bin
      digits←2⊥⌽⍉⌽len 3⍴bin↑⍨3×len
      digits↓⍨←+/∧\0=digits
      name,←'-',⎕D[digits,0/⍨⍬≡digits]
    ∇
    ∇ name←StripCaseCode name;code;length;mask;⎕IO
      ⎕IO←0
      length←(⌽name)⍳'-'
      →0 If length∊0,≢name   ⍝ case code must be after hyphen
      code←⎕D⍳(-length)↑name
      name←((-length+1)↓name)
      →0 If code∨.>7         ⍝ case code must be octal digits
      mask←⌽,⍉2 2 2⊤code     ⍝ boolean mask of upper-case
      →0 If~(⊂(≢name)↓mask)∊⍬(,0)(0 0)  ⍝ mask must be padded with 0-2 zeros
      name←((≢name)↑mask)Case name
    ∇

    ∇ order←GradeFiles files
    ⍝ slashes after all chars and quads before all
    ⍝ in "descending" order into folders: must process parent folders first
      order←⍋¯1@{9109=⍵}9999999@{47=⍵}↑⎕UCS¨files
    ∇
    ∇ {r}←to Relocate from;i;nextfrom;nextto
    ⍝ move list of files, updating file names as we go through the list
      r←⍬
      :While ~0∊⍴to
          (nextto nextfrom)←⊃¨(to from) ⋄ (to from)↓⍨←1
          :If nextto≢nextfrom
              r,←nextto ⎕NMOVE nextfrom
              from←(nextfrom ⎕R nextto)from  ⍝ update directories in particular
          :Else ⋄ r,←1   ⍝ no need to copy
          :EndIf
      :EndWhile
    ∇

    :EndSection





    :Section Namespaces

    ⍝ Supported name classes
    _NameClasses←2.1              ⍝ array
    _NameClasses,←3.1 3.2 4.1 4.2 ⍝ tradfn/dfn/tradop/dop
    _NameClasses,←9.1 9.4 9.5     ⍝ ns/class/interface
    NameClasses←{(~⍵)↓_NameClasses}  ⍝ 0=exclude arrays ⋄ 1=include arrays

      IsScripted←{
          0<≢# CurrentFileName ⍵:1          ⍝ tied namespaces are always scripted !!! tied scripted namespace where file is lost produce a pop up at ⎕SRC time !!!
          16::0
          1⊣⎕SRC ⍵
      }
    IsRoot←{⍵=⍵.##}                         ⍝ is namespace a root
    SplitNs←{t←1+d←-'.'⍳⍨⌽⍵ ⋄ (d↓⍵)(t↑⍵)}   ⍝ '#.ns' 'name' ← SplitNs '#.ns.name'
    SplitNsRef←{⍺⍎@1⊢SplitNs ⍵}             ⍝ #.ns 'name' ← # SplitNsRef 'ns.name'
    NormNs←{⍺←⎕DMX.⎕NS⍬ ⋄ ⍕⍺⍎⍵}             ⍝ normalise a namespace name

    Execute←{⍺←⎕DMX.⎕NS⍬ ⋄ ⍺⍎⍵}             ⍝ safe execute (avoid clash with our stuff) ⋄ missing ⍺ requires fully qualified name
    IsRootName←{0::0 ⋄ IsRoot Execute ⍵}    ⍝ is name of a root
    ∇ nc←{nsref}NameClass name
    ⍝ safe name class (avoid clash with our stuff)
    ⍝ return ¯9 for trad ns
      :If 900⌶⍬ ⋄ nsref←⎕DMX.⎕NS ⍬ ⋄ :EndIf
      :If 9.1=nc←nsref.⎕NC,⊂,name
      :AndIf ~IsScripted nsref⍎name
          nc←¯9
      :EndIf
    ∇

    ∇ (container ns)←rsi_xsi ContainerNs ns;n;rsi;xsi
    ⍝ container is a reference, and namespace is fully qualified namespace name
      (rsi xsi)←rsi_xsi
      :If 9=⎕NC'ns'
          (container ns)←#(⍕ns)
      :Else
          n←xsi{(⍵∊⍺)×¯1+⍺⍳⍵}⊂'⎕SE.UCMD' ⍝ Drop UCMD stack if present
          container←⊃n↓rsi
          ns←(⍕container),(0≠≢ns)/'.',ns
      :EndIf
    ∇

    ∇ r←GetRefTo nsname;name;nc;parent
    ⍝ Get a reference to a container namespace (or ⍬ if that is not possible)
      :If 9=⌊|nc←NameClass nsname      ⍝ already there
      :OrIf IsRootName nsname         ⍝ or a root
          r←⍎nsname
      :ElseIf 0≠nc ⍝ Invalid or used name, not worth trying
          r←⍬
      :Else  ⍝ doesn't exist yet - attempt to create it
          :Trap 0 ⋄ r←⍎nsname ⎕NS''  ⍝ create it
          :Else ⋄ r←⍬    ⍝ can't be created
          :EndTrap
      :EndIf
    ∇

    :EndSection





    :Section Lookup

    ∇ r←GetName file;code;ns
    ⍝ Attempt to determine the name which will be defined by a file
      ns←(⎕NS'').⎕NS r←'' ⍝ Two levels of nesting to allow safe fixing of :Namespace/##.⎕IO←0/:EndNamespace
      :Trap 0
          2 ns.⎕FIX'file://',file
          :If 1=≢r←ns.⎕NL-⍳10 ⋄ r←⊃r
          :Else ⋄ r←''
          :EndIf
      :EndTrap
    ∇

    ∇ linkns←LookupFile file;dirs;inx;mask
    ⍝ look up which linked directory has file
      :If 0≠≢⎕SE.Link.Links
          dirs←⎕SE.Link.Links.dir
      :AndIf ∨/mask←dirs Begins¨⊂file
          inx←⊃⍒mask×≢¨dirs ⍝ longest directory containing file
          linkns←inx⊃⎕SE.Link.Links
      :Else
          linkns←⍬
      :EndIf
    ∇

    :EndSection




    :Section Link Private function    ⍝ to avoid clobber auto-complete in ⎕SE.Link

    ∇ src←GetRefSource ns
      :Trap 16 ⋄ src←⎕SRC ns
      :Else ⋄ src←⎕NULL  ⍝ traditional namespace
      :EndTrap
    ∇
    ∇ src←{ns}GetAplSource name;nc
    ⍝ src is a vector of text vectors, unless traditional namespace with get ⎕NULL
    ⍝ name may be empty to get the source of ns
      :If 0∊⍴name
          src←GetRefSource ns
      :Else
          :If 900⌶⍬ ⋄ ns←⎕NS ⍬ ⋄ :EndIf
          nc←ns.⎕NC⊂,name
          :Select nc
          :Case 2.1 ⍝ variable
              :Trap 11 ⋄ src←,↓##.Serialise ns⍎name
              :Else ⋄ Error'Unsupported array: ',(⍕ns),'.',name
              :EndTrap
          :CaseList 3.1 3.2 4.1 4.2 ⋄ src←ns.⎕NR name ⍝ tradfn/dfn/tradop/dop
          :CaseList 9.1 9.4 9.5 ⋄ src←GetRefSource ns⍎name ⍝ ns/class/interface
          :Else ⋄ Error('Cannot get source of ',(⍕ns),'.',name,': invalid name class (',(⍕nc),')')
          :EndSelect
      :EndIf
    ∇
    ∇ src←GetFileSource file;type
      src←⍬
      :Trap 0
          :If 1=type←1 ⎕NINFO file ⋄ src←⎕NULL  ⍝ directory → namespace
          :ElseIf 2=type ⋄ src←⊃⎕NGET file 1    ⍝ file
          :EndIf
      :EndTrap
    ∇

    ∇ (name nc)←{where}Fix(name src);invalid;names;nc
    ⍝ Fix source and return names and nameclass
    ⍝ nameclass is 0 if no valid source was found, ¯1 if name is invalid, ¯9 if trad namespace
      :If 900⌶⍬ ⋄ where←⎕DMX.(⎕NS ⍬) ⋄ :EndIf  ⍝ fix in dummy namespace that cannot break anything (e.g. ':Namespace' '##.⎕IO←0' ':EndNamespace')
      invalid←¯1=⎕NC,name ⋄ nc←¯1  ⍝ invalid unless source defines its own name
      :If src≡⎕NULL  ⍝ traditional namespace
          →0 If invalid
          name where.⎕NS'' ⋄ nc←¯9
      :Else
          :Trap 11
              names←2 where.⎕FIX src  ⍝ fn/op/script - name may be different
              :If 1=≢names ⋄ name←⊃names ⋄ nc←where.⎕NC⊂name
              :Else ⋄ name←'' ⋄ nc←0
              :EndIf
          :Else
              →0 If invalid
              :If 121=⎕DMX.ENX  ⍝ unnamed - try again
                  name where.{⍎⍺,'←⎕FIX ⍵'}src
                  nc←where.⎕NC⊂,name
              :Else   ⍝ expect array
                  :Trap 0
                      name where.{⍎⍺,'←⍵'}##.Deserialise src  ⍝ array
                      nc←where.⎕NC⊂,name
                  :Else
                      name←'' ⋄ nc←0  ⍝ unknown
                  :EndTrap
              :EndIf
          :EndTrap
      :EndIf
    ∇
    ∇ (file oldfile nc)←DetermineFileName(opts ns name oldname src);dir;ext;isroot;nc;oldfile;path;ref;userfile
    ⍝ what should the file name be according to link
    ⍝ src may be the (nested) text source of item, or may be the scalar name class
      :If 0=⎕NC ns ⋄ oldfile←'' ⋄ ref←⎕NULL   ⍝ namespace doesn't exist - src or nc ought to be provided
      :Else ⋄ ref←⍎ns ⋄ oldfile←ref CurrentFileName name         ⍝ Grab file info before ⎕FIX might destroy it
      :EndIf
      file←(oldname≡name)/oldfile  ⍝ if object was renamed we don't have a file name any more
      :If (0∊⍴src)∨(src≡0)  ⍝ no information about item - item must exist
          nc←ref NameClass name  ⍝ no source : item must exist
          :If 0=nc ⋄ Log'Source of name ',ns,'.',name,' doesn''t exist' ⋄ :EndIf
      :ElseIf 0=≡src ⋄ nc←src ⍝ (non-zero) name class is given
      :Else  ⍝ infer name class from (non-empty) source
          (name nc)←Fix name src  ⍝ fix in dummy namespace
      :EndIf
      :If nc=¯1 ⋄ file←'' ⋄ :Return ⋄ :EndIf  ⍝ invalid
      ⍝ trad namespace are given name class ¯9
      :If isroot←nc=¯9 ⋄ isroot←opts.ns≡ns,'.',name ⋄ :EndIf ⍝ we're asking for the root of the link
      :If 0=≢file                   ⍝ no existing file name for it
      :OrIf opts.forceFilenames     ⍝ force using the default
          :If isroot  ⍝ if we're asking for opts.ns then the answer is opts.dir
              file←opts.dir
          :Else
              :If ~opts.flatten                ⍝ flatten prevents subdirectory hierarchy
                  file←(≢opts.ns)↓ns              ⍝ Add sub.namespace structure
                  ((file='.')/file)←'/'            ⍝ Convert dots to /
              :EndIf
              file←opts.dir,file               ⍝ Add link directory
              file,←'/',name                  ⍝ Add object name
          :EndIf
          file,←opts Tail nc               ⍝ Add extension
      :EndIf
      file←opts ##.CaseCode⍣opts.caseCode⊢file ⍝ case coded-name (if required)
      ⍝ Allow user to determine file name - they return '' to give up
      :If 3=(⍎opts.ns).⎕NC opts.beforeWrite
          ⍝:Trap DEBUG↓0
          :If 0<≢userfile←(opts.ns⍎opts.beforeWrite)ref name oldname nc src file opts 1
              file←userfile
          :EndIf
          ⍝:Else
          ⍝    U.Warn'beforeWrite callback ',opts.beforeWrite,' failed: ',⎕DMX.EM
          ⍝:EndTrap
      :EndIf
      :If ¯9=nc ⋄ file←0 NormDir file ⋄ :EndIf  ⍝ for ⎕NPARTS to work on it
      (dir file ext)←⎕NPARTS path←file
      :If opts.forceExtensions∨0=≢ext
      ⍝:OrIf ~⎕NEXISTS path    ⍝ why ??? file is not supposed to exist yet
          ext←opts Tail nc
      :EndIf
      :If isroot<opts.forceFilenames ⋄ file←CaseCode⍣opts.caseCode⊢name ⋄ :EndIf  ⍝ forceFileNames does not affect directory - only leaf name
      file←dir,file,ext
      file←ApplyOldExtn⍣(~opts.forceExtensions)⊢file  ⍝ doesn't sound like a good idea - the existing .dyalog file could define something different (in particular if one of the two files is an array and casecode is off)
    ∇

    ∇ (ns name nc)←CurrentAplName file;fullname;info;row
      :If 0≠≢info←↑GetFileInfo file  ⍝ file actually linked by interpreter
      :AndIf (≢info)≥row←info[;5 6]⍳0 0  ⍝ file defines a single object
          ns←NormNs⍕⊃info[row;2] ⋄ name←⍕⊃info[row;1]  ⍝ NormNs due to 5174⌶ sometimes reporting full path in first column
          nc←# NameClass ns,'.',name  ⍝ no need to protect fully-qualified name
      :Else
          ns←name←'' ⋄ nc←¯1
      :EndIf
    ∇
    ∇ (ns expname actname nc)←opts DetermineAplName file;dir;src
    ⍝ ns is the target namespace
    ⍝ expname is apl name expected from file name
    ⍝ actname is actual list of names fixed from file
    ⍝ nc is name class of name
      src←GetFileSource file
      file←opts ##.StripCaseCode file
      (dir file)←2↑⎕NPARTS file  ⍝ drop extension
      :If 0=≢file ⋄ dir←¯1↓dir ⋄ :EndIf  ⍝ drop trailing slash for directories
      (ns expname)←SplitNs fullname←opts.ns,DotSlash(≢opts.dir)↓dir,file
      :If opts.flatten ⋄ ns←⍕opts.ns ⋄ :EndIf
      :If 0=≢src ⋄ (actname nc)←''⍬
      :Else ⋄ (actname nc)←Fix expname src
      :EndIf
      :If ¯1=⎕NC ns ⋄ nc←¯1 ⋄ :EndIf ⍝ invalid namespace path
    ∇

    :EndSection





    :Section UI

    ∇ {msg}←{header}Warn msg
    ⍝ Warn user
      :If 900⌶⍬ ⋄ header←']LINK WARNING: ' ⋄ :EndIf
      ⎕←msg←↑header∘,¨@1⊢,⊆,msg
    ∇

    ∇ {msg}←Log msg
    ⍝ Debug information
      :If debug≠0
          ⎕←msg
      :EndIf
    ∇

    :EndSection

:EndNamespace
