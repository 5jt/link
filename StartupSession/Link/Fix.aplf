 {linked}←where Fix src;RSI;XSI;added;callback;delete;file;fix;link;name;nc;nosrc;ns;nsname;nsref;oldfile;oldname;this;update;watch;⎕IO;⎕ML
⍝ Fix a function/operator or script, preserving any existing source files
⍝   Used internally by EditorFix "afterfix" processing
⍝   May be called by other tools providing the source in ⎕NR/⎕SRC format on the right
⍝   One day, the left argument of (ns name) may be inferred, for now it must be provided
⍝ Returns 1 if a link was found for the name, else 0
⍝   NB: if 0 is returned, no ⎕FX/⎕FIX was done
 ⎕IO ⎕ML←1 1
 :If U.debug=2
     (1+⊃⎕LC)⎕STOP⊃⎕SI
 :EndIf
 :Trap DEBUG↓0
     XSI←⎕XSI ⋄ RSI←⎕RSI
     added←'⎕SE.Link.Add'≡⊃1↓XSI  ⍝ user explicitly added the name to the link - update file independently of watch
     callback←∨/'⎕SE.Link.OnAfterFix' '⎕SE.SALTUtils.EditorFix'⍷⍨⊂⊃1↓XSI  ⍝ v18.0 started using ⎕SE.Link.OnFix/⎕SE.Link.OnAfterFix - v17.1 was called directly from SALT
     →callback/NOHOLD ⍝ Can't hold in a high-priority callback (Editor AfterFix callback) - see mantis 18160: can't :Hold 0⍴⊂'' in a high-priority callback
     :Hold '⎕SE.Link.Notify' '⎕SE.Link.Links'  ⍝ ok not to hold ⎕SE.Link.Links in high-priority callback because it only reads it and doesn't change it.
NOHOLD:
         nosrc←0=≢src
         (ns name oldname)←3↑(⊆,where),'' ''
         oldname,←(0=≢oldname)/name ⍝ oldname not specified
         name,←(0=≢name)/oldname ⍝ name not specified
         this←⊃RSI XSI U.ContainerNs ns
         nsname←⍕nsref←this(0 U.GetRefTo)ns

         :If 0∊⍴nsref ⋄ U.Error'Not a namespace: ',ns ⋄ :EndIf
         :If ~linked←~0∊⍴link←U.LookupRef ns←nsref ⋄ :Return ⋄ :EndIf

         (file oldfile nc)←link(0 U.DetermineFileName)nsname name oldname src    ⍝ must fix in dummy namespace to determine nameclass

         :If nc=¯1 ⋄ U.Error'Invalid name: ',nsname,'.',name
         :ElseIf (0=nc)∧(~0∊⍴src) ⋄ U.Error'Invalid source for ',nsname,'.',name,': ',⍕src
         :ElseIf (0=nc) ⋄ U.Error'No source for ',nsname,'.',name
         :EndIf

         update←('ns'≡link.watch)      ⍝  watching namespace : update file (not tied to file with 2 ⎕FIX)
         update∨←('both'≡link.watch)∧(2=⌊nc)∨(~⎕NEXISTS file)  ⍝ watching both ways : new file need to be created - file needs to be updated if editing a linked array
         update>←(2=⌊nc)∧(~⎕NEXISTS file)   ⍝ never create file on new array unless was explicitly added
         update∨←added  ⍝ explicit add must update file
         watch←'both' 'dir'∊⍨⊂link.watch  ⍝ watching files

         :If callback∧(0≠≢oldfile)∧(oldname≢name)  ⍝ Repair damage done by editor on rename
             :If (1↓U.LASTFIX)≢(⍕ns)(oldname) ⋄ U.Error'Fixing error: last fix is ',(⍕2⊃U.LASTFIX),'.',(3⊃U.LASTFIX),' instead of ',(⍕ns),'.',(oldname) ⋄ :EndIf
             ns U.Untie name  ⍝ editor ties newname to oldfile
             (⊃U.LASTFIX)U.Into oldfile   ⍝ editor overwrites oldfile with new definition
             :If ~watch  ⍝ FileSystemWatcher should fix the change for us
             :AndIf 0 ¯1∊⍨ns U.Fix oldname oldfile  ⍝ fix must succeed !
                 U.Error'Could not fix ',(⍕ns),'.',oldname,' from "',oldfile,'"'
             :EndIf
             U.LASTFIX←⍬  ⍝ last fix event consumed
             delete←0  ⍝ old file must be preserved
         :Else
             delete←(0≠≢oldfile)∧(file≢oldfile)∧(name≡oldname)  ⍝ old file must be removed : file name was changed by beforeWrite or forceFilename or forceExtensions
         :EndIf

         :If update<callback ⍝ Editor fix when not watching the workspace
             →0  ⍝ job done
         :EndIf

         :If nosrc    ⍝ Source not provided - find it
             src←ns U.GetAplSource name
         :EndIf

         :If 3=link.(⎕NC beforeWrite)  ⍝ user callback on file write
             →0 U.If~(⍎link.beforeWrite)'beforeWrite'link file(nsname,'.',name)(|nc)(nsname,'.',oldname)src
         :EndIf

         fix←~nosrc ⍝ no need to update if source was read from APL
         fix∧←~callback ⍝ no need to refix if change was done through editor (in which case src was empty anyways)
         update∨←fix∧('both' 'ns'∊⍨⊂link.watch)  ⍝ update file if watching namespace
         1 U.Log'name='nsname'.'name' file="'file'" fix='(⍕fix)' update='(⍕update)

         :If update  ⍝ file system must reflect changes
             :If nc≠¯9.1 ⋄ :AndIf U.HasNewlines∊src
                 U.Error'Source code cannot have newlines'
             :EndIf
             :Trap 0
                 :If nc=¯9.1  ⍝ tradns → folder
                     3 ⎕MKDIR file
                 :Else  ⍝ file
                     3 ⎕MKDIR 1⊃⎕NPARTS file ⍝ make sure folder is there
                     src U.Into file
                 :EndIf
             :Else
                 U.Error'Unable to write "',nsname,'.',name,'" to file: "',file,'"'
             :EndTrap
             fix∧←~watch  ⍝ filewatcher will tie the file for us
             :If delete  ⍝ old file must be removed
                 ⎕NDELETE oldfile
             :EndIf
         :EndIf

         :If fix
             :If 'both'≡link.watch ⋄ src←file ⋄ :EndIf   ⍝ tie if watching both ways
             :If ¯1 0∊⍨2⊃ns U.Fix name src
                 U.Error'Unable to fix "',nsname,'.',name,'" from source: ',⍕src
             :EndIf
         :EndIf
     :EndHold ⍝ Links
 :Else
     U.Resignal 1
 :EndTrap
