 {linked}←where Fix src;RSI;XSI;callback;delete;error;file;fix;link;name;nc;nosrc;ns;nsname;nsref;oldfile;oldname;this;tie;update;⎕IO;⎕ML
⍝ Fix a function/operator or script, preserving any existing source files
⍝   Used internally by EditorFix "afterfix" processing
⍝   May be called by other tools providing the source in ⎕NR/⎕SRC format on the right
⍝   One day, the left argument of (ns name) may be inferred, for now it must be provided
⍝ Returns 1 if a link was found for the name, else 0
⍝   NB: if 0 is returned, no ⎕FX/⎕FIX was done
 ⎕IO ⎕ML←1 1
 :If U.debug=2
     (1+⊃⎕LC)⎕STOP⊃⎕SI
 :EndIf
 :Trap DEBUG↓0
     :If ~U.HasLinks ⋄ linked←0 ⋄ :Return ⋄ :EndIf

     XSI←⎕XSI ⋄ RSI←⎕RSI
     :If 900⌶⍬ ⋄ where←'' ⋄ :EndIf  ⍝ fix into calling space by default
     callback←∨/'⎕SE.Link.OnAfterFix' '⎕SE.SALTUtils.EditorFix'⍷⍨⊂⊃1↓XSI  ⍝ v18.0 started using ⎕SE.Link.OnFix/⎕SE.Link.OnAfterFix - v17.1 was called directly from SALT
     →callback/NOHOLD ⍝ Can't hold in a high-priority callback (Editor AfterFix callback) - see mantis 18160: can't :Hold 0⍴⊂'' in a high-priority callback
     :Hold '⎕SE.Link.Notify' '⎕SE.Link.Links'
     ⍝ Ok not to hold ⎕SE.Link.Links in high-priority callback because it only reads it and doesn't change it, and no other APL thread will run.
     ⍝ However not holding '⎕SE.Link.Notify' is annoying because there is a non-zero probability of the files being in an incomplete/misleading state
NOHOLD:
         nosrc←0=≢src
         :If 9≠⎕NC'where' ⋄ where←⊆,where ⋄ :EndIf  ⍝ do not ravel reference
         (ns name oldname)←3↑where,'' '' ''
         :If 0=≢ns ⋄ ns←⊃RSI ⋄ :EndIf  ⍝ namespace not specified - do not ravel reference
         oldname,←(0=≢oldname)/name ⍝ oldname not specified
         name,←(0=≢name)/oldname ⍝ name not specified
         this←⊃RSI XSI U.ContainerNs ns
         nsname←⍕nsref←this(0 U.GetRefTo)ns

         :If 0∊⍴nsref ⋄ U.Error'Not a namespace: ',ns ⋄ :EndIf
         :If ~linked←~0∊⍴link←U.LookupRef ns←nsref ⋄ :Return ⋄ :EndIf
         :If ~U.IsNamedRef nsref ⋄ U.Error'Not a properly named namespace: ',ns ⋄ :EndIf

         (file oldfile nc)←link(0 U.DetermineFileName)nsname name oldname src

         :If nc=¯1 ⋄ U.Error'Invalid name: ',nsname,'.',name
         :ElseIf (0=nc)∧(~nosrc) ⋄ U.Error'Invalid source for ',nsname,'.',name ⍝ ,': ',⍕src
         :ElseIf (0=nc) ⋄ U.Error'No source for ',nsname,'.',name
         :ElseIf callback∧(2.1=nc)  ⍝ never watch namespace arrays
             ¯1 U.Log'ignoring editing of array: 'nsname'.'name
             :Return
         :EndIf

         update←1  ⍝ explicit call always updates file
         :If callback
             update←(⊂link.watch)∊'ns' 'both'   ⍝ callback must watch ns
             ⍝update>←(2.1=nc)∧(~⎕NEXISTS file)   ⍝ never create file on new array unless was explicitly added
         :EndIf
         tie←U.FixTie link  ⍝ should we tie files when fixing

         :If callback∧(0≠≢oldfile)∧(oldname≢name)  ⍝ Repair damage done by editor on rename - won't happen if oldname is undefined (link issue #190) because oldfile must then be empty
             :If (1↓U.LASTFIX)≢(⍕ns)(oldname) ⋄ U.Error'Fixing error: last fix is ',(⍕2⊃U.LASTFIX),'.',(3⊃U.LASTFIX),' instead of ',(⍕ns),'.',(oldname) ⋄ :EndIf
             ns U.Untie name  ⍝ editor ties newname to oldfile
             (⊃U.LASTFIX)U.Into oldfile   ⍝ editor overwrites oldfile with new definition
             :If 0>ns U.QFix oldfile oldname tie 1 ⍝ fix must succeed ! FileSystemWatcher will pick up the change but won't fix it since it's already fixed - TODO it means it will re-hash the file
                 U.Error'Could not fix ',(⍕ns),'.',oldname,' from "',oldfile,'"'
             :EndIf
             delete←0  ⍝ old file must be preserved
         :ElseIf callback∧(0=≢oldfile)  ⍝ new name - link issue #196 v18.0 needs to preserve source as typed
             :If (1↓U.LASTFIX)≢(⍕ns)(oldname) ⋄ U.Error'Fixing error: last fix is ',(⍕2⊃U.LASTFIX),'.',(3⊃U.LASTFIX),' instead of ',(⍕ns),'.',(oldname) ⋄ :EndIf
             :If 0 ⋄ :AndIf 2=ns.⎕NC name ⋄ src←⎕SE.Dyalog.Array.Serialise ns⍎name  ⍝ source of array (never happens)
             :Else ⋄ src←⊃U.LASTFIX  ⍝ source as typed
             :EndIf
             nosrc←0 ⋄ delete←0
         :Else
             delete←(0≠≢oldfile)∧(file≢oldfile)∧(name≡oldname)  ⍝ old file must be removed : file name was changed by beforeWrite or forceFilename or forceExtensions
         :EndIf

         :If callback   ⍝ called back from editor
             U.LASTFIX←⍬  ⍝ last fix event consumed
             :If ~update ⍝ Editor fix when not watching the namespace
                 :Return  ⍝ job done
             :EndIf
         :EndIf

         :If nosrc    ⍝ Source not provided - find it
             :If 1=≡src←ns U.GetAplSource name  ⍝ string source means error
                 U.Error src  ⍝ failed to get source
             :ElseIf nc=2.1  ⍝ link issue #205 - check round-trip of serialisation
             :AndIf (ns⍎name){0::1 ⋄ ⎕CT←0 ⋄ ⍺≢⎕SE.Dyalog.Array.Deserialise ⍵}src
                 U.Error'Cannot round-trip serialisation of array: ',nsname,'.',name
             :EndIf
         :EndIf

         :If 3=link.(⎕NC beforeWrite)  ⍝ user callback on file write
             :If ~(⍎link.beforeWrite)'beforeWrite'link file(nsname,'.',name)(|nc)(nsname,'.',oldname)src
                 ¯1 U.Log'name='nsname'.'name' file="'file'" handled by user'
                 :Return
             :EndIf
         :EndIf

         :If nc≠¯9.1 ⋄ :AndIf U.HasNewlines∊src
             U.Error'Source code cannot have newlines'
         :EndIf

         fix←~nosrc ⍝ no need to update if source was read from APL
         fix∧←~callback ⍝ no need to refix if change was done through editor (in which case src was empty anyways)
         ¯1 U.Log'name='nsname'.'name' file="'file'" fix='(⍕fix)' update='(⍕update)

         error←''
         :If update  ⍝ file system must reflect changes - FileWatcher may pick it up after this high-priority callback, and should notice no change in source, therefore not fix it  - TODO it means it will re-hash the file
             :Trap 0
                 :If nc=¯9.1  ⍝ tradns → folder
                     3 ⎕MKDIR file
                 :Else  ⍝ file
                     3 ⎕MKDIR 1⊃⎕NPARTS file ⍝ make sure folder is there
                     src U.Into file
                 :EndIf
             :Else  ⍝ do not error yet - we still want to attempt to fix the source in the workspace
                 error←'Unable to write ',nsname,'.',name,' to file: ',file
             :EndTrap
             :If delete  ⍝ old file must be removed
                 ⎕NDELETE oldfile
             :EndIf
         :EndIf

         :If fix
             :If (0∊⍴error)∧(update∧tie) ⋄ src←file ⋄ :EndIf  ⍝ unless there was an error updating the file
             :If ¯1 0∊⍨2⊃ns U.Fix name src 1   ⍝ do not call QFix because file may be out-of-sync
                 U.Error'Unable to fix ',nsname,'.',name,' from source: ',⍕src
             :EndIf
         :EndIf

         :If ~0∊⍴error
             U.Error error
         :EndIf
         :If callback
             linked←fix  ⍝ editor must know if we didn't fix
         :EndIf

     :EndHold ⍝ Links
 :Else
     U.Resignal 1
 :EndTrap
