 {r}←Notify args;actname;affected;children;curfile;curname;curnc;curnsname;deleted;dir;expname;exppath;hidden;i;inFail;link;linked;msg;nc;nsname;nsref;oldexpname;oldfile;oldname;oldnc;oldnsname;oldnsref;oldpath;path;recur;regex;startai;type;warn;watch;z
⍝ Notify Link system that an external file has changed
⍝ Usually called by FileSystemWatcher

 startai←⎕AI
 :Select U.debug
 :Case 1 ⋄ ⍝⎕←'Notify'args
 :Case 2 ⋄ (1+⊃⎕LC)⎕STOP⊃⎕SI ⍝ ⋄ ⎕←'Notify'args
 :EndSelect

 :Trap DEBUG↓0
     recur←{+/∧\⍵∊1↑⍵}⎕XSI ⍝ Number of times Notify called self
⍝     →(⎕SE.Link.FileSystemWatcher≡⊃⎕RSI)/NOHOLD ⍝ Can't hold in a high-priority callback (FileSystemWatcher event)
     :Hold '⎕SE.Link.Notify',(recur≠1)/⍕recur ⍝ Avoid deadlock due to recursion
⍝NOHOLD:
         r←⍬⊤⍬

         (type path oldpath)←{⍵,(≢⍵)↓'' '' ''},⊆args
         (path oldpath)←0 U.NormFile¨path oldpath
         deleted←type≡'deleted' ⋄ msg←'Notify: ',type,' ',path,': '

         →END U.If 0∊⍴link←U.LookupFile path  ⍝ not linked => done

         :If ~deleted
             :Trap 0
                 dir←1=1 ⎕NINFO path
                 hidden←∨/6 ⎕NINFO(¯1+≢U.Ancestry link.dir)↓U.Ancestry path
             :Else ⋄ →END⊣U.Log msg,'not accessible'
             :EndTrap
             :If hidden ⋄ →END⊣U.Log'hidden' ⋄ :EndIf
             :If dir⍱link U.HasExtn path  ⍝ must be directory or have correct extension
                 →END⊣U.Log msg,'file type not managed by link'
             :EndIf
         :EndIf

         ⍝ determine expected apl name from file name, and actual apl name from source
         (nsname expname actname nc)←link U.DetermineAplName path
         :If 0=≢nsref←U.GetRefTo nsname
             →END⊣U.Log msg,'file does not reflect in a valid namespace'
         :EndIf
         ⍝ determine current name tied to file (if any)
         (curnsname curname curnc)←U.CurrentAplName path
         ⍝ determin current file tied to name we plan to use
         curfile←0 U.NormFile nsref U.CurrentFileName actname

         :If deleted  ⍝ can't examine source file - rely on expected apl name
             :If ~curnc∊0 ¯1 ⋄ actname←curname ⋄ nc←curnc     ⍝ interpreter remembers that name was linked to file
             :Else ⋄ nc←,nsref U.NameClass actname←expname  ⍝ rely on expected apl name inferred from file name
             :EndIf
             :If nc∊¯1 0 ⋄ →END⊣U.Log msg,'could not determine which object was linked to it' ⋄ :EndIf
         :Else
             :If nc∊¯1 0 ⋄ →END⊣U.Log msg,'invalid file contents' ⋄ :EndIf
         :EndIf


         :If 3=⎕NC link.beforeRead ⍝ user exit defined?
             ⍝:Trap DEBUG↓0
             →END U.If~(link⍎link.beforeRead)type path nsname link 0 ⍝ return 1 to continue else 0
             ⍝:Else
             ⍝    U.Warn'beforeRead callback ',link.beforeRead,' failed: ',⎕DMX.EM
             ⍝:EndTrap
         :EndIf

         affected←nsname,'.',actname

         :Select type

         :Case 'created'               ⍝ A new file
             effect←1
             ⍝:If 0≠≢z←nsref U.CurrentFileName actname  ⍝ Redefines existing object with a source file
             ⍝:AndIf ⎕NEXISTS z       ⍝ ... and that file exists
             :If 0≠⎕NC affected  ⍝ object already exists
                 →END⊣U.Warn msg,'ignoring attempt to redefine ',affected,(0<≢curfile)/' which is linked to ',curfile
             :ElseIf ~curnc∊0 ¯1    ⍝ file already tied to another name
                 U.Untie curnsname,'.',curname
                 U.Log msg,'creating ',affected,' - unlinking previously linked ',curnsname,'.',curname
             :Else
                 U.Log msg,'creating ',affected
             :EndIf

         :Case 'changed'               ⍝ Update to existing file?
             :If nc=¯9 ⋄ →END⊣U.Log msg,'ignoring change to directory' ⋄ :EndIf
             :If path≡curfile      ⍝ name already tied to the same file
                 :If (nsref U.CurrentHash actname)≡(U.FileHash path) ⋄ →END⊣U.Log msg,'checksum unchanged - not updating ',affected
                 :Else ⋄ U.Log msg,'updating previously linked ',affected
                 :EndIf
             :ElseIf 0≠≢curfile      ⍝ name was tied to a different file
                 →END⊣U.Warn msg,'ignoring attempt to redefine ',affected,' which is linked to ',curfile
             :ElseIf ~curnc∊0 ¯1     ⍝ file already tied to a name
                 (⍎curnsname).⎕EX curname  ⍝ delete name in case the name defined by source has changed
                 U.Log msg,'updating un-linked ',affected,', expunging previously linked ',curnsname,'.',curname
             :Else
                 U.Log msg,'updating un-linked ',affected
             :EndIf

         :Case 'renamed'
             :If 0≠⎕NC affected                    ⍝ redefining existing name
                 →END⊣U.Warn msg,'ignoring attempt to redefine ',affected,(0<≢curfile)/' which is linked to',curfile
             :EndIf
             (oldnsname oldexpname)←2↑link U.DetermineAplName oldpath  ⍝ cannot determine actual name and nameclass because file is gone
             oldname←oldnsname,'.',oldexpname
             :If 9=⎕NC oldnsname
                 oldnsref←(⍎oldnsname) ⋄ oldnc←oldnsref.⎕NC oldexpname
                 oldfile←oldnsref U.CurrentFileName oldexpname
             :Else ⋄ oldnsref←⎕NULL ⋄ oldnc←¯1 ⋄ oldfile←''
             :EndIf
             :If nc=¯9         ⍝ move traditional ns
                 :If 9=⌊oldnc ⍝ old name is an existing namespace
                     ⍝actname nsref.⎕NS oldnsref.⍎oldexpname ⍝ deep copy into parent with a nice name
                     actname nsref.⎕NS''  ⍝ create empty namespace
                     oldnsref.⎕EX oldexpname                        ⍝ expunge old
                     :Trap 0 ⋄ children←⊃⎕NINFO⍠1⊢path,'/*'
                     :Else ⋄ children←0⍴⊂''
                     :EndTrap
                     U.Log msg,'namespace rename ',oldname,' → ',affected
                     Notify¨{'changed'⍵}¨children
                 :Else                                    ⍝ no old ns
                     U.Warn msg,'not found namespace ',oldname,' - loading ',affected,' from ',path
                     :If 0<≢inFail←link FixFiles nsref path
                         U.Warn msg,'failed to load: ',⍕inFail
                     :EndIf
                 :EndIf
                 →END
             :EndIf
             :If ~oldnc∊0 ¯1    ⍝ old apl name must be expunged
                 oldnsref.⎕EX oldexpname
             :EndIf
             :If ~curnc∊0 ¯1     ⍝ new file already tied to a name
                 U.Untie curnsname,'.',curname
                 U.Warn msg,'moving ',oldname,' to ',affected,' - unlinking previously linked ',curnsname,'.',curname
             :Else
                 U.Log msg,'moving ',oldname,' to ',affected
             :EndIf

         :Case 'deleted'
             :If 0=⎕NC affected  ⍝ object didn't exist
                 U.Log msg,'not found: ',affected
             :ElseIf ~curnc∊0 ¯1     ⍝ file was tied to a name
                 U.Untie curnsname,'.',curname
                 U.Warn msg,'expunging ',affected,' - unlinking previously linked ',curnsname,'.',curname
             :Else
                 U.Log msg,'expunging ',affected
             :EndIf
             ⎕EX affected

         :Else
             U.Log'Unhandled event type: ',type
             →END ⍝ might as well give up now

         :EndSelect


                      ⍝ rename files if incorrectly named
         watch←'dir' 'both'∊⍨⊂link.watch  ⍝ watching files
         :If (~deleted)∧(link.forceFilenames∨link.forceExtensions)
         :AndIf path≢exppath←⊃U.DetermineFileName link nsname name oldname nc
             exppath ⎕NMOVE path ⋄ path←exppath
             →END U.If watch  ⍝ file watcher will take care of the rest
         :EndIf

         :If type≢'deleted'
             :Trap 0
                 :If U.IsDir path
                     actname nsref.⎕NS''   ⍝ create namespace
                 :ElseIf 2=⌊nc        ⍝ array
                     z←Deserialise U.GetFile path
                     ⍎nsname,'.',actname,'←z'
                 :Else               ⍝ try ⎕FIX
                     nsref QFix path link
                 :EndIf
             :Case 22
              ∘∘∘
                     ⍝:If ~'tmp___'≡¯6↑path ⍝ PyCharm up to no good again
                 U.Warn msg,'reported to unreadable file'
                     ⍝:EndIf
             :Else
                 ∘∘∘
                 U.Warn'Unable to fix file',⍕⎕DMX.(EM Message)
             :EndTrap
         :EndIf
END:
         :If U.debug≠0
             ⍝⎕←'Notify time spent: ',⍕⎕AI[3]-startai[3]
         :EndIf
     :EndHold ⍝ 'Notify'
 :Else
     U.Resignal 1
 :EndTrap
