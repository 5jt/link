 msg←{opts}Break nss;defopts;link;linked;links;mask;missing;n;ns;refs;there;tobreak;unlinked;⎕IO
 ⍝ Use Break # to break all links
 ⍝ opts.exact=0 (default) : break all links below argument namespaces
 ⍝ opts.exact=1 (-exact)  : break all links matching arguments namespaces - but not their children if they are linked to other directories
 ⍝ opts.all=0 (default)   : break specified links
 ⍝ opts.all=1 (-all)      : break all links
 :If U.debug=2
     (1+⊃⎕LC)⎕STOP⊃⎕SI
 :EndIf
 :Trap DEBUG↓0
     :If U.HasLinks
         ⎕IO←1

         (defopts←⎕NS ⍬).(all recursive)←0 'error'
         opts←defopts U.DefaultOpts⍎⎕NS∘⍬⍣(900⌶⍬)⊢'opts'

         tobreak←unlinked←missing←0⍴# ⋄ n←0

         there←⊃⎕RSI ⎕XSI U.ContainerNs ⍬         ⍝ reference to calling namespace
         :If ''≡0⍴nss ⋄ nss←⊂nss ⋄ :EndIf  ⍝ ⊆ would enclose vector of namespaces
         refs←there(0 U.GetRefTo)U.OnEach nss  ⍝ turn into references
         missing,←(0=≢¨refs)/nss ⋄ refs←(0⍴#),(0<≢¨refs)/refs  ⍝ ⍬ for reference not found - ensure prototype is ref

         linked←⍎¨⎕SE.Link.Links.ns ⋄ links←⎕SE.Link.Links
         :If opts.all
             tobreak←refs←linked
         :ElseIf 0∊⍴refs
             tobreak←refs
         :ElseIf opts.recursive≡'on'
             tobreak←(∨⌿refs∘.U.IsParent linked)/linked  ⍝ break namespaces and children
         :ElseIf (⊂opts.recursive)∊'off' 'error'
             tobreak←(∨⌿refs∘.=linked)/linked  ⍝ break exact namespaces only
             :If opts.recursive≡'error'
             :AndIf (~0∊⍴tobreak)∧(~0∊⍴linked~refs)
             :AndIf ∨/mask←∨/tobreak∘.U.IsParent(linked~refs) ⍝ trying to break a parent of a link that remains
                 U.Error'Cannot break children namespaces linked to their own directories - set ''recursive'' flag to ''on'' or ''off'': ',U.List mask/tobreak
             :EndIf
         :Else
             U.Error'''recursive'' flag must be one of ''on'' ''off'' ''error'''
         :EndIf
         unlinked,←refs~tobreak

         :If ~0∊⍴tobreak
             ⍝ First stop the file watcher - :Hold-ing '⎕SE.Link.Notify' could prevent the Notify callbacks from completing
             FileSystemWatcher.Break∪(linked∊tobreak)/links
             :Hold '⎕SE.Link.Notify'
                 n←+/U.RemoveFileTiesIn¨∪tobreak  ⍝ holding is now useless because there is no file watcher - however people may still Fix and such
             :EndHold
             ⎕SE.Link.Links/⍨←~linked∊tobreak
         :EndIf

         msg←''
         :If ×≢tobreak
             msg,←⊂'Unlinked ',(⍕n),' items in:',U.List∪tobreak
         :EndIf
         :If ×≢missing
             msg,←⊂'Not found:',U.List∪missing
         :EndIf
         :If ×≢unlinked
             msg,←⊂'Not linked:',U.List∪unlinked
         :EndIf
         :If ~0∊⍴msg ⋄ msg←'; 'U.JoinList msg ⋄ :EndIf
     :Else
         msg←'No active links'
     :EndIf
     :Trap 517 ⋄ {⎕SIGNAL ⍵}517 ⋄ :EndTrap ⍝ Flush association table given by 5176⌶⍬
 :Else
     U.Resignal 1
 :EndTrap
