 msg←{opts}Refresh nss;inFail;ko;link;links;ns;nsref;ok;outFail;rsi;source;stacks;xsi;⎕IO;⎕ML
 ⎕IO ⎕ML←1 1
 :If U.debug=2
     (1+⊃⎕LC)⎕STOP⊃⎕SI
 :EndIf
 :Trap DEBUG↓0
     :Hold '⎕SE.Link.Links'
         :If ~U.HasLinks ⋄ msg←'No active links' ⋄ :Return ⋄ :EndIf
         opts←U.DefaultOpts⍎⎕NS∘⍬⍣(900⌶⍬)⊢'opts' ⍝ monadic?
         :If ''≡0⍴nss ⋄ nss←⊂nss ⋄ :EndIf  ⍝ ⊆ would enclose vector of namespaces
         ok←ko←⍬
         links←⎕SE.Link.Links
         (rsi xsi)←(⎕RSI ⎕XSI)
         stacks←U.UcmdStacks xsi
         :For ns :In nss
             ns←⊃⌽rsi xsi U.ContainerNs ns
             :If ~0∊⍴nsref←(0 U.GetRefTo)ns
             :AndIf ~0∊⍴link←links U.LookupRef nsref
                 :If opts.source≡'auto' ⋄ source←link.source   ⍝ use actual source used at Create time
                 :Else ⋄ source←opts.source  ⍝ use specified source
                 :EndIf
                 0 Watcher.Pause link
                 :If 'ns'≡source
                     ok,←⊂'Exported: ',ns,' → ',U.WinSlash link.dir
                     :If 0≠≢outFail←link U.WriteFiles(⍎link.ns)link.dir
                         ko,←(⊂(⍕≢outFail),' export(s) failed:',),outFail
                     :EndIf
                 :ElseIf 'dir'≡source
                     ok,←⊂'Imported: ',ns,' ← ',U.WinSlash link.dir
                     :If 0≠≢inFail←link U.FixFiles(⍎link.ns)link.dir 1  ⍝ always overwrite
                         ko,←(⊂(⍕≢inFail),' import(s) failed:'),inFail
                     :EndIf
                 :EndIf
                 1 Watcher.Pause link
             :Else
                 ko,←⊂'Not linked: ',ns
             :EndIf
         :EndFor
     :EndHold
     msg←1↓U.FmtLines ok,ko
 :Else
     U.Resignal 1
 :EndTrap
